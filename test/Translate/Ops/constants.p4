// RUN: p4mlir-translate --typeinference-only %s | FileCheck %s
// RUN: p4mlir-translate --typeinference-only --no-dump --Wdisable --dump-exported-p4 %s | diff -u - %s.ref
// RUN: p4mlir-translate --typeinference-only --no-dump --Wdisable --dump-exported-p4 %s | p4test -

// NOTE: Assertions have been autogenerated by utils/generate-test-checks.py

// This is a combination of const.p4, constsigned.p4 and constant-fold-infint.p4
// from P4C testsuite

const bit<32> bzero = 32w0;

const bool cfalse = false;
const bool ctrue = true;

const bit<48> btooLarge = 48w0xAA_BB_CC_DD_EE_FF_00; // this is too large
const bit<32> bone = 32w1;
const bit<32> bmax = 32w0xFFFF_FFFF;
const bit<32> bz = 1;
const bit<8> blarge = (bit<8>)16w1024;
const bit<32> btwo = 32w2;
const int<32> btwotwo = (int<32>)btwo;
const bit<32> btwothree = (bit<32>)btwotwo;
const bit<6>  btwofour = (bit<6>)(bit<32>)(int<32>)btwo;

struct S {
    bit<32> a;
    bit<32> b;
}

const S v = { 32w3, (bit<32>)bz };

struct T
{
    S a;
    S b;
}

const T zz = {
    { 32w0, 32w1 },
    { 32w2, 32w3 }
};

const bit<32> x = 32w0;
const bit<32> x1 = ~32w0;

typedef int<32> int32;

const int32 izero = (int32)32w0;

const bit<4> fa = 0b0101;
const int fb = (int)fa; // 5
const bit<7> fc = (bit<7>)fb; // 5

const int<4> fd = -1;
const int fe = (int)fd; // -1
const bit<7> ff = (bit<7>)fe; // 0b1111111 = 127
const int<7> fg = (int<7>)fe; // 0b1111111 = -1
const int fh = (int)fg; // -1

const int<8> sa = 0;
const int<8> sb = -1;
const int<8> sc = -2;
const int<8> sd = -127;
const int<8> se = -128;
const int<8> sf = -129;
const int<8> sg = -255;
const int<8> sh = -256;
const int<8> si = 1;
const int<8> sj = 2;
const int<8> sk = 127;
const int<8> sl = 128;
const int<8> sm = 129;
const int<8> sn = 255;
const int<8> so = 256;

const int<8> sa0 = 8s0;
const int<8> sb0 = -8s1;
const int<8> sc0 = -8s2;
const int<8> sd0 = -8s127;
const int<8> se0 = -8s128;
const int<8> sf0 = -8s129;
const int<8> sg0 = -8s255;
const int<8> sh0 = -8s256;
const int<8> si0 = 8s1;
const int<8> sj0 = 8s2;
const int<8> sk0 = 8s127;
const int<8> sl0 = 8s128;
const int<8> sm0 = 8s129;
const int<8> sn0 = 8s255;
const int<8> so0 = 8s256;

const int<1> szz0 = 0;
const int<1> szz1 = 1;
const int<2> szz2 = 2;
const int<1> szz3 = (int<1>) szz2[0:0];


// CHECK: #[[$ATTR_0:.+]] = #p4hir.bool<false> : !p4hir.bool
// CHECK: #[[$ATTR_1:.+]] = #p4hir.bool<true> : !p4hir.bool
// CHECK: #[[$ATTR_2:.+]] = #p4hir.int<-127> : !i8i
// CHECK: #[[$ATTR_3:.+]] = #p4hir.int<-128> : !i8i
// CHECK: #[[$ATTR_4:.+]] = #p4hir.int<4294967295> : !b32i
// CHECK: #[[$ATTR_5:.+]] = #p4hir.int<127> : !b7i
// CHECK: #[[$ATTR_6:.+]] = #p4hir.int<-1> : !i1i
// CHECK: #[[$ATTR_7:.+]] = #p4hir.int<-1> : !i4i
// CHECK: #[[$ATTR_8:.+]] = #p4hir.int<-1> : !i7i
// CHECK: #[[$ATTR_9:.+]] = #p4hir.int<-1> : !i8i
// CHECK: #[[$ATTR_11:.+]] = #p4hir.int<-2> : !i2i
// CHECK: #[[$ATTR_12:.+]] = #p4hir.int<-2> : !i8i
// CHECK: #[[$ATTR_13:.+]] = #p4hir.int<206488571150080> : !b48i
// CHECK: #[[$ATTR_14:.+]] = #p4hir.int<0> : !b32i
// CHECK: #[[$ATTR_15:.+]] = #p4hir.int<0> : !b8i
// CHECK: #[[$ATTR_16:.+]] = #p4hir.int<0> : !i1i
// CHECK: #[[$ATTR_17:.+]] = #p4hir.int<0> : !i32i
// CHECK: #[[$ATTR_18:.+]] = #p4hir.int<0> : !i8i
// CHECK: #[[$ATTR_19:.+]] = #p4hir.int<127> : !i8i
// CHECK: #[[$ATTR_20:.+]] = #p4hir.int<1> : !b32i
// CHECK: #[[$ATTR_21:.+]] = #p4hir.int<1> : !i8i
// CHECK: #[[$ATTR_22:.+]] = #p4hir.int<2> : !b32i
// CHECK: #[[$ATTR_23:.+]] = #p4hir.int<2> : !b6i
// CHECK: #[[$ATTR_24:.+]] = #p4hir.int<2> : !i32i
// CHECK: #[[$ATTR_25:.+]] = #p4hir.int<2> : !i8i
// CHECK: #[[$ATTR_26:.+]] = #p4hir.int<3> : !b32i
// CHECK: #[[$ATTR_27:.+]] = #p4hir.int<5> : !b4i
// CHECK: #[[$ATTR_28:.+]] = #p4hir.int<5> : !b7i

// CHECK-LABEL p4hir.func action @reference
action reference() {
 bit<32> local_bzero = bzero;

 bool local_cfalse = cfalse;
 bool local_ctrue = ctrue;

 bit<48> local_btooLarge = btooLarge;
 bit<32> local_bone = bone;
 bit<32> local_bmax = bmax;
 bit<32> local_bz = bz;
 bit<8> local_blarge = blarge;
 bit<32> local_btwo = btwo;
 int<32> local_btwotwo = btwotwo;
 bit<32> local_btwothree = btwothree;
 bit<6> local_btwofour = btwofour;

 S local_v = v;

 T local_zz = zz;

 bit<32> local_x = x;
 bit<32> local_x1 = x1;

 int32 local_izero = izero;

 bit<4> local_fa = fa;
 bit<7> local_fc = fc;

 int<4> local_fd = fd;
 bit<7> local_ff = fe;
 int<7> local_fg = fg;

 int<8> local_sa = sa;
 int<8> local_sb = sb;
 int<8> local_sc = sc;
 int<8> local_sd = sd;
 int<8> local_se = se;
 int<8> local_sf = sf;
 int<8> local_sg = sg;
 int<8> local_sh = sh;
 int<8> local_si = si;
 int<8> local_sj = sj;
 int<8> local_sk = sk;
 int<8> local_sl = sl;
 int<8> local_sm = sm;
 int<8> local_sn = sn;
 int<8> local_so = so;

 int<8> local_sa0 = sa0;
 int<8> local_sb0 = sb0;
 int<8> local_sc0 = sc0;
 int<8> local_sd0 = sd0;
 int<8> local_se0 = se0;
 int<8> local_sf0 = sf0;
 int<8> local_sg0 = sg0;
 int<8> local_sh0 = sh0;
 int<8> local_si0 = si0;
 int<8> local_sj0 = sj0;
 int<8> local_sk0 = sk0;
 int<8> local_sl0 = sl0;
 int<8> local_sm0 = sm0;
 int<8> local_sn0 = sn0;
 int<8> local_so0 = so0;

 int<1> local_ssz0 = szz0;
 int<1> local_szz1 = szz1;
 int<2> local_szz2 = szz2;
 int<1> local_szz3 = szz3;
}

// CHECK:         %[[VAL_0:.*]] = p4hir.variable ["local_bzero", init]
// CHECK:         %[[VAL_1:.*]] = p4hir.variable ["local_cfalse", init]
// CHECK:         %[[VAL_2:.*]] = p4hir.variable ["local_ctrue", init]
// CHECK:         %[[VAL_3:.*]] = p4hir.variable ["local_btooLarge", init]
// CHECK:         %[[VAL_4:.*]] = p4hir.variable ["local_bone", init]
// CHECK:         %[[VAL_5:.*]] = p4hir.variable ["local_bmax", init]
// CHECK:         %[[VAL_6:.*]] = p4hir.variable ["local_bz", init]
// CHECK:         %[[VAL_7:.*]] = p4hir.variable ["local_blarge", init]
// CHECK:         %[[VAL_8:.*]] = p4hir.variable ["local_btwo", init]
// CHECK:         %[[VAL_9:.*]] = p4hir.variable ["local_btwotwo", init]
// CHECK:         %[[VAL_10:.*]] = p4hir.variable ["local_btwothree", init]
// CHECK:         %[[VAL_11:.*]] = p4hir.variable ["local_btwofour", init]
// CHECK:         %[[VAL_12:.*]] = p4hir.variable ["local_v", init]
// CHECK:         %[[VAL_13:.*]] = p4hir.variable ["local_zz", init]
// CHECK:         %[[VAL_14:.*]] = p4hir.variable ["local_x", init]
// CHECK:         %[[VAL_15:.*]] = p4hir.variable ["local_x1", init]
// CHECK:         %[[VAL_16:.*]] = p4hir.variable ["local_izero", init]
// CHECK:         %[[VAL_17:.*]] = p4hir.variable ["local_fa", init]
// CHECK:         %[[VAL_19:.*]] = p4hir.variable ["local_fc", init]
// CHECK:         %[[VAL_20:.*]] = p4hir.variable ["local_fd", init]
// CHECK:         %[[VAL_22:.*]] = p4hir.variable ["local_ff", init]
// CHECK:         %[[VAL_23:.*]] = p4hir.variable ["local_fg", init]
// CHECK:         %[[VAL_25:.*]] = p4hir.variable ["local_sa", init]
// CHECK:         %[[VAL_26:.*]] = p4hir.variable ["local_sb", init]
// CHECK:         %[[VAL_27:.*]] = p4hir.variable ["local_sc", init]
// CHECK:         %[[VAL_28:.*]] = p4hir.variable ["local_sd", init]
// CHECK:         %[[VAL_29:.*]] = p4hir.variable ["local_se", init]
// CHECK:         %[[VAL_30:.*]] = p4hir.variable ["local_sf", init]
// CHECK:         %[[VAL_31:.*]] = p4hir.variable ["local_sg", init]
// CHECK:         %[[VAL_32:.*]] = p4hir.variable ["local_sh", init]
// CHECK:         %[[VAL_33:.*]] = p4hir.variable ["local_si", init]
// CHECK:         %[[VAL_34:.*]] = p4hir.variable ["local_sj", init]
// CHECK:         %[[VAL_35:.*]] = p4hir.variable ["local_sk", init]
// CHECK:         %[[VAL_36:.*]] = p4hir.variable ["local_sl", init]
// CHECK:         %[[VAL_37:.*]] = p4hir.variable ["local_sm", init]
// CHECK:         %[[VAL_38:.*]] = p4hir.variable ["local_sn", init]
// CHECK:         %[[VAL_39:.*]] = p4hir.variable ["local_so", init]
// CHECK:         %[[VAL_40:.*]] = p4hir.variable ["local_sa0", init]
// CHECK:         %[[VAL_41:.*]] = p4hir.variable ["local_sb0", init]
// CHECK:         %[[VAL_42:.*]] = p4hir.variable ["local_sc0", init]
// CHECK:         %[[VAL_43:.*]] = p4hir.variable ["local_sd0", init]
// CHECK:         %[[VAL_44:.*]] = p4hir.variable ["local_se0", init]
// CHECK:         %[[VAL_45:.*]] = p4hir.variable ["local_sf0", init]
// CHECK:         %[[VAL_46:.*]] = p4hir.variable ["local_sg0", init]
// CHECK:         %[[VAL_47:.*]] = p4hir.variable ["local_sh0", init]
// CHECK:         %[[VAL_48:.*]] = p4hir.variable ["local_si0", init]
// CHECK:         %[[VAL_49:.*]] = p4hir.variable ["local_sj0", init]
// CHECK:         %[[VAL_50:.*]] = p4hir.variable ["local_sk0", init]
// CHECK:         %[[VAL_51:.*]] = p4hir.variable ["local_sl0", init]
// CHECK:         %[[VAL_52:.*]] = p4hir.variable ["local_sm0", init]
// CHECK:         %[[VAL_53:.*]] = p4hir.variable ["local_sn0", init]
// CHECK:         %[[VAL_54:.*]] = p4hir.variable ["local_so0", init]
// CHECK:         %[[VAL_56:.*]] = p4hir.variable ["local_szz1", init]
// CHECK:         %[[VAL_57:.*]] = p4hir.variable ["local_szz2", init]
// CHECK:         %[[VAL_58:.*]] = p4hir.variable ["local_szz3", init]
