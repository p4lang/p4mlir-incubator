// RUN: p4mlir-translate --typeinference-only %s | FileCheck %s

// NOTE: Assertions have been autogenerated by utils/generate-test-checks.py

// CHECK-LABEL:   p4hir.func action @bit5_concat_bit5
// CHECK-SAME:        %[[arg_lhs:.*]]: !b5i {{.*}}, %[[arg_rhs:.*]]: !b5i {{.*}}, %[[arg_res:.*]]: !p4hir.ref<!b10i> {{.*}}
// CHECK:           %[[val_concat:.*]] = p4hir.concat(%[[arg_lhs]] : !b5i, %[[arg_rhs]] : !b5i) : !b10i
// CHECK:           p4hir.assign %[[val_concat]], %[[arg_res]] : <!b10i>
// CHECK:           p4hir.return

action bit5_concat_bit5(in bit<5> lhs, in bit<5> rhs, out bit<10> res) {
    res = lhs ++ rhs;
}

// CHECK-LABEL:   p4hir.func action @bit5_concat_bit10
// CHECK-SAME:        %[[arg_lhs:.*]]: !b5i {{.*}}, %[[arg_rhs:.*]]: !b10i {{.*}}, %[[arg_res:.*]]: !p4hir.ref<!b15i> {{.*}}
// CHECK:           %[[val_concat:.*]] = p4hir.concat(%[[arg_lhs]] : !b5i, %[[arg_rhs]] : !b10i) : !b15i
// CHECK:           p4hir.assign %[[val_concat]], %[[arg_res]] : <!b15i>
// CHECK:           p4hir.return

action bit5_concat_bit10(in bit<5> lhs, in bit<10> rhs, out bit<15> res) {
    res = lhs ++ rhs;
}

// CHECK-LABEL:   p4hir.func action @int5_concat_int5
// CHECK-SAME:        %[[arg_lhs:.*]]: !i5i {{.*}}, %[[arg_rhs:.*]]: !i5i {{.*}}, %[[arg_res:.*]]: !p4hir.ref<!i10i> {{.*}}
// CHECK:           %[[val_concat:.*]] = p4hir.concat(%[[arg_lhs]] : !i5i, %[[arg_rhs]] : !i5i) : !i10i
// CHECK:           p4hir.assign %[[val_concat]], %[[arg_res]] : <!i10i>
// CHECK:           p4hir.return

action int5_concat_int5(in int<5> lhs, in int<5> rhs, out int<10> res) {
    res = lhs ++ rhs;
}

// CHECK-LABEL:   p4hir.func action @int5_concat_int10
// CHECK-SAME:        %[[arg_lhs:.*]]: !i5i {{.*}}, %[[arg_rhs:.*]]: !i10i {{.*}}, %[[arg_res:.*]]: !p4hir.ref<!i15i> {{.*}}
// CHECK:           %[[val_concat:.*]] = p4hir.concat(%[[arg_lhs]] : !i5i, %[[arg_rhs]] : !i10i) : !i15i
// CHECK:           p4hir.assign %[[val_concat]], %[[arg_res]] : <!i15i>
// CHECK:           p4hir.return

action int5_concat_int10(in int<5> lhs, in int<10> rhs, out int<15> res) {
    res = lhs ++ rhs;
}

// CHECK-LABEL:   p4hir.func action @bit5_concat_int5
// CHECK-SAME:        %[[arg_lhs:.*]]: !b5i {{.*}}, %[[arg_rhs:.*]]: !i5i {{.*}}, %[[arg_res:.*]]: !p4hir.ref<!b10i> {{.*}}
// CHECK:           %[[val_concat:.*]] = p4hir.concat(%[[arg_lhs]] : !b5i, %[[arg_rhs]] : !i5i) : !b10i
// CHECK:           p4hir.assign %[[val_concat]], %[[arg_res]] : <!b10i>
// CHECK:           p4hir.return

action bit5_concat_int5(in bit<5> lhs, in int<5> rhs, out bit<10> res) {
    res = lhs ++ rhs;
}

// CHECK-LABEL:   p4hir.func action @bit5_concat_int10
// CHECK-SAME:        %[[arg_lhs:.*]]: !b5i {{.*}}, %[[arg_rhs:.*]]: !i10i {{.*}}, %[[arg_res:.*]]: !p4hir.ref<!b15i> {{.*}}
// CHECK:           %[[val_concat:.*]] = p4hir.concat(%[[arg_lhs]] : !b5i, %[[arg_rhs]] : !i10i) : !b15i
// CHECK:           p4hir.assign %[[val_concat]], %[[arg_res]] : <!b15i>
// CHECK:           p4hir.return

action bit5_concat_int10(in bit<5> lhs, in int<10> rhs, out bit<15> res) {
    res = lhs ++ rhs;
}

// CHECK-LABEL:   p4hir.func action @int5_concat_bit5
// CHECK-SAME:        %[[arg_lhs:.*]]: !i5i {{.*}}, %[[arg_rhs:.*]]: !b5i {{.*}}, %[[arg_res:.*]]: !p4hir.ref<!i10i> {{.*}}
// CHECK:           %[[val_concat:.*]] = p4hir.concat(%[[arg_lhs]] : !i5i, %[[arg_rhs]] : !b5i) : !i10i
// CHECK:           p4hir.assign %[[val_concat]], %[[arg_res]] : <!i10i>
// CHECK:           p4hir.return

action int5_concat_bit5(in int<5> lhs, in bit<5> rhs, out int<10> res) {
    res = lhs ++ rhs;
}

// CHECK-LABEL:   p4hir.func action @int5_concat_bit10
// CHECK-SAME:        %[[arg_lhs:.*]]: !i5i {{.*}}, %[[arg_rhs:.*]]: !b10i {{.*}}, %[[arg_res:.*]]: !p4hir.ref<!i15i> {{.*}}
// CHECK:           %[[val_concat:.*]] = p4hir.concat(%[[arg_lhs]] : !i5i, %[[arg_rhs]] : !b10i) : !i15i
// CHECK:           p4hir.assign %[[val_concat]], %[[arg_res]] : <!i15i>
// CHECK:           p4hir.return

action int5_concat_bit10(in int<5> lhs, in bit<10> rhs, out int<15> res) {
    res = lhs ++ rhs;
}
