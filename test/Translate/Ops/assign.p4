// RUN: p4mlir-translate --typeinference-only %s | FileCheck %s

// NOTE: Assertions have been autogenerated by utils/generate-test-checks.py

// CHECK: #[[$ATTR_0:.+]] = #p4hir.int<3> : !b10i
// CHECK: #[[$ATTR_1:.+]] = #p4hir.int<3> : !infint
// CHECK: #[[$ATTR_2:.+]] = #p4hir.int<42> : !b10i
// CHECK: #[[$ATTR_3:.+]] = #p4hir.enum_field<first, !Serenum> : !Serenum

enum bit<10> Serenum {
  first = 42
}

// CHECK-LABEL:   p4hir.func action @assign
action assign() {
    // CHECK:           %[[var_a:.*]] = p4hir.variable ["a"] : <!b10i>
    // CHECK:           %[[var_b:.*]] = p4hir.variable ["b"] : <!b10i>
    // CHECK:           %[[var_res:.*]] = p4hir.variable ["res"] : <!b10i>
    // CHECK:           %[[val_a:.*]] = p4hir.read %[[var_a]] : <!b10i>
    // CHECK:           p4hir.assign %[[val_a]], %[[var_res]] : <!b10i>
    // CHECK:           %[[val_a:.*]] = p4hir.read %[[var_a]] : <!b10i>
    // CHECK:           %[[val_b:.*]] = p4hir.read %[[var_b]] : <!b10i>
    // CHECK:           %[[val_binop_res:.*]] = p4hir.binop(add, %[[val_a]], %[[val_b]]) : !b10i
    // CHECK:           p4hir.assign %[[val_binop_res]], %[[var_res]] : <!b10i>
    // CHECK:           p4hir.return

    bit<10> a;
    bit<10> b;
    bit<10> res;

    res = a;
    res = a + b;
}

// CHECK-LABEL:   p4hir.func action @mul_assign_with_var
action mul_assign_with_var() {
    // CHECK:           %[[var_lhs:.*]] = p4hir.variable ["lhs"] : <!b10i>
    // CHECK:           %[[var_rhs:.*]] = p4hir.variable ["rhs"] : <!b10i>
    // CHECK:           %[[val_lhs:.*]] = p4hir.read %[[var_lhs]] : <!b10i>
    // CHECK:           %[[val_rhs:.*]] = p4hir.read %[[var_rhs]] : <!b10i>
    // CHECK:           %[[val_binop_res:.*]] = p4hir.binop(mul, %[[val_lhs]], %[[val_rhs]]) : !b10i
    // CHECK:           p4hir.assign %[[val_binop_res]], %[[var_lhs]] : <!b10i>
    // CHECK:           p4hir.return

    bit<10> lhs;
    bit<10> rhs;
    lhs *= rhs;
}

// CHECK-LABEL:   p4hir.func action @mul_assign_with_const
action mul_assign_with_const() {
    // CHECK:           %[[var_lhs:.*]] = p4hir.variable ["lhs"] : <!b10i>
    // CHECK:           %[[val_int3_b10i:.*]] = p4hir.const #int3_b10i
    // CHECK:           %[[val_rhs:.*]] = p4hir.cast(%[[val_int3_b10i]] : !b10i) : !b10i
    // CHECK:           %[[val_lhs:.*]] = p4hir.read %[[var_lhs]] : <!b10i>
    // CHECK:           %[[val_binop_res:.*]] = p4hir.binop(mul, %[[val_lhs]], %[[val_rhs]]) : !b10i
    // CHECK:           p4hir.assign %[[val_binop_res]], %[[var_lhs]] : <!b10i>
    // CHECK:           p4hir.return

    bit<10> lhs;
    lhs *= 3;
}

// CHECK-LABEL:   p4hir.func action @mul_assign_with_serenum
action mul_assign_with_serenum() {
    // CHECK:           %[[var_lhs:.*]] = p4hir.variable ["lhs"] : <!b10i>
    // CHECK:           %[[const_serenum_first:.*]] = p4hir.const #Serenum_first
    // CHECK:           %[[val_lhs:.*]] = p4hir.read %[[var_lhs]] : <!b10i>
    // CHECK:           %[[val_rhs:.*]] = p4hir.cast(%[[const_serenum_first]] : !Serenum) : !b10i
    // CHECK:           %[[val_binop_res:.*]] = p4hir.binop(mul, %[[val_lhs]], %[[val_rhs]]) : !b10i
    // CHECK:           p4hir.assign %[[val_binop_res]], %[[var_lhs]] : <!b10i>
    // CHECK:           p4hir.return
    
    bit<10> lhs;
    lhs *= Serenum.first;
}

// CHECK-LABEL:   p4hir.func action @div_assign_with_var
action div_assign_with_var() {
    // CHECK:           %[[var_lhs:.*]] = p4hir.variable ["lhs"] : <!b10i>
    // CHECK:           %[[var_rhs:.*]] = p4hir.variable ["rhs"] : <!b10i>
    // CHECK:           %[[val_lhs:.*]] = p4hir.read %[[var_lhs]] : <!b10i>
    // CHECK:           %[[val_rhs:.*]] = p4hir.read %[[var_rhs]] : <!b10i>
    // CHECK:           %[[val_binop_res:.*]] = p4hir.binop(div, %[[val_lhs]], %[[val_rhs]]) : !b10i
    // CHECK:           p4hir.assign %[[val_binop_res]], %[[var_lhs]] : <!b10i>
    // CHECK:           p4hir.return

    bit<10> lhs;
    bit<10> rhs;
    lhs /= rhs;
}

// CHECK-LABEL:   p4hir.func action @div_assign_with_const
action div_assign_with_const() {
    // CHECK:           %[[var_lhs:.*]] = p4hir.variable ["lhs"] : <!b10i>
    // CHECK:           %[[val_int3_b10i:.*]] = p4hir.const #int3_b10i
    // CHECK:           %[[val_rhs:.*]] = p4hir.cast(%[[val_int3_b10i]] : !b10i) : !b10i
    // CHECK:           %[[val_lhs:.*]] = p4hir.read %[[var_lhs]] : <!b10i>
    // CHECK:           %[[val_binop_res:.*]] = p4hir.binop(div, %[[val_lhs]], %[[val_rhs]]) : !b10i
    // CHECK:           p4hir.assign %[[val_binop_res]], %[[var_lhs]] : <!b10i>
    // CHECK:           p4hir.return

    bit<10> lhs;
    lhs /= 3;
}

// CHECK-LABEL:   p4hir.func action @div_assign_with_serenum
action div_assign_with_serenum() {
    // CHECK:           %[[var_lhs:.*]] = p4hir.variable ["lhs"] : <!b10i>
    // CHECK:           %[[const_serenum_first:.*]] = p4hir.const #Serenum_first
    // CHECK:           %[[val_lhs:.*]] = p4hir.read %[[var_lhs]] : <!b10i>
    // CHECK:           %[[val_rhs:.*]] = p4hir.cast(%[[const_serenum_first]] : !Serenum) : !b10i
    // CHECK:           %[[val_binop_res:.*]] = p4hir.binop(div, %[[val_lhs]], %[[val_rhs]]) : !b10i
    // CHECK:           p4hir.assign %[[val_binop_res]], %[[var_lhs]] : <!b10i>
    // CHECK:           p4hir.return
    
    bit<10> lhs;
    lhs /= Serenum.first;
}

// CHECK-LABEL:   p4hir.func action @mod_assign_with_var
action mod_assign_with_var() {
    // CHECK:           %[[var_lhs:.*]] = p4hir.variable ["lhs"] : <!b10i>
    // CHECK:           %[[var_rhs:.*]] = p4hir.variable ["rhs"] : <!b10i>
    // CHECK:           %[[val_lhs:.*]] = p4hir.read %[[var_lhs]] : <!b10i>
    // CHECK:           %[[val_rhs:.*]] = p4hir.read %[[var_rhs]] : <!b10i>
    // CHECK:           %[[val_binop_res:.*]] = p4hir.binop(mod, %[[val_lhs]], %[[val_rhs]]) : !b10i
    // CHECK:           p4hir.assign %[[val_binop_res]], %[[var_lhs]] : <!b10i>
    // CHECK:           p4hir.return

    bit<10> lhs;
    bit<10> rhs;
    lhs %= rhs;
}

// CHECK-LABEL:   p4hir.func action @mod_assign_with_const
action mod_assign_with_const() {
    // CHECK:           %[[var_lhs:.*]] = p4hir.variable ["lhs"] : <!b10i>
    // CHECK:           %[[val_int3_b10i:.*]] = p4hir.const #int3_b10i
    // CHECK:           %[[val_rhs:.*]] = p4hir.cast(%[[val_int3_b10i]] : !b10i) : !b10i
    // CHECK:           %[[val_lhs:.*]] = p4hir.read %[[var_lhs]] : <!b10i>
    // CHECK:           %[[val_binop_res:.*]] = p4hir.binop(mod, %[[val_lhs]], %[[val_rhs]]) : !b10i
    // CHECK:           p4hir.assign %[[val_binop_res]], %[[var_lhs]] : <!b10i>
    // CHECK:           p4hir.return

    bit<10> lhs;
    lhs %= 3;
}

// CHECK-LABEL:   p4hir.func action @mod_assign_with_serenum
action mod_assign_with_serenum() {
    // CHECK:           %[[var_lhs:.*]] = p4hir.variable ["lhs"] : <!b10i>
    // CHECK:           %[[const_serenum_first:.*]] = p4hir.const #Serenum_first
    // CHECK:           %[[val_lhs:.*]] = p4hir.read %[[var_lhs]] : <!b10i>
    // CHECK:           %[[val_rhs:.*]] = p4hir.cast(%[[const_serenum_first]] : !Serenum) : !b10i
    // CHECK:           %[[val_binop_res:.*]] = p4hir.binop(mod, %[[val_lhs]], %[[val_rhs]]) : !b10i
    // CHECK:           p4hir.assign %[[val_binop_res]], %[[var_lhs]] : <!b10i>
    // CHECK:           p4hir.return
    
    bit<10> lhs;
    lhs %= Serenum.first;
}

// CHECK-LABEL:   p4hir.func action @add_assign_with_var
action add_assign_with_var() {
    // CHECK:           %[[var_lhs:.*]] = p4hir.variable ["lhs"] : <!b10i>
    // CHECK:           %[[var_rhs:.*]] = p4hir.variable ["rhs"] : <!b10i>
    // CHECK:           %[[val_lhs:.*]] = p4hir.read %[[var_lhs]] : <!b10i>
    // CHECK:           %[[val_rhs:.*]] = p4hir.read %[[var_rhs]] : <!b10i>
    // CHECK:           %[[val_binop_res:.*]] = p4hir.binop(add, %[[val_lhs]], %[[val_rhs]]) : !b10i
    // CHECK:           p4hir.assign %[[val_binop_res]], %[[var_lhs]] : <!b10i>
    // CHECK:           p4hir.return

    bit<10> lhs;
    bit<10> rhs;
    lhs += rhs;
}

// CHECK-LABEL:   p4hir.func action @add_assign_with_const
action add_assign_with_const() {
    // CHECK:           %[[var_lhs:.*]] = p4hir.variable ["lhs"] : <!b10i>
    // CHECK:           %[[val_int3_b10i:.*]] = p4hir.const #int3_b10i
    // CHECK:           %[[val_rhs:.*]] = p4hir.cast(%[[val_int3_b10i]] : !b10i) : !b10i
    // CHECK:           %[[val_lhs:.*]] = p4hir.read %[[var_lhs]] : <!b10i>
    // CHECK:           %[[val_binop_res:.*]] = p4hir.binop(add, %[[val_lhs]], %[[val_rhs]]) : !b10i
    // CHECK:           p4hir.assign %[[val_binop_res]], %[[var_lhs]] : <!b10i>
    // CHECK:           p4hir.return

    bit<10> lhs;
    lhs += 3;
}

// CHECK-LABEL:   p4hir.func action @add_assign_with_serenum
action add_assign_with_serenum() {
    // CHECK:           %[[var_lhs:.*]] = p4hir.variable ["lhs"] : <!b10i>
    // CHECK:           %[[const_serenum_first:.*]] = p4hir.const #Serenum_first
    // CHECK:           %[[val_lhs:.*]] = p4hir.read %[[var_lhs]] : <!b10i>
    // CHECK:           %[[val_rhs:.*]] = p4hir.cast(%[[const_serenum_first]] : !Serenum) : !b10i
    // CHECK:           %[[val_binop_res:.*]] = p4hir.binop(add, %[[val_lhs]], %[[val_rhs]]) : !b10i
    // CHECK:           p4hir.assign %[[val_binop_res]], %[[var_lhs]] : <!b10i>
    // CHECK:           p4hir.return
    
    bit<10> lhs;
    lhs += Serenum.first;
}

// CHECK-LABEL:   p4hir.func action @sub_assign_with_var
action sub_assign_with_var() {
    // CHECK:           %[[var_lhs:.*]] = p4hir.variable ["lhs"] : <!b10i>
    // CHECK:           %[[var_rhs:.*]] = p4hir.variable ["rhs"] : <!b10i>
    // CHECK:           %[[val_lhs:.*]] = p4hir.read %[[var_lhs]] : <!b10i>
    // CHECK:           %[[val_rhs:.*]] = p4hir.read %[[var_rhs]] : <!b10i>
    // CHECK:           %[[val_binop_res:.*]] = p4hir.binop(sub, %[[val_lhs]], %[[val_rhs]]) : !b10i
    // CHECK:           p4hir.assign %[[val_binop_res]], %[[var_lhs]] : <!b10i>
    // CHECK:           p4hir.return

    bit<10> lhs;
    bit<10> rhs;
    lhs -= rhs;
}

// CHECK-LABEL:   p4hir.func action @sub_assign_with_const
action sub_assign_with_const() {
    // CHECK:           %[[var_lhs:.*]] = p4hir.variable ["lhs"] : <!b10i>
    // CHECK:           %[[val_int3_b10i:.*]] = p4hir.const #int3_b10i
    // CHECK:           %[[val_rhs:.*]] = p4hir.cast(%[[val_int3_b10i]] : !b10i) : !b10i
    // CHECK:           %[[val_lhs:.*]] = p4hir.read %[[var_lhs]] : <!b10i>
    // CHECK:           %[[val_binop_res:.*]] = p4hir.binop(sub, %[[val_lhs]], %[[val_rhs]]) : !b10i
    // CHECK:           p4hir.assign %[[val_binop_res]], %[[var_lhs]] : <!b10i>
    // CHECK:           p4hir.return

    bit<10> lhs;
    lhs -= 3;
}

// CHECK-LABEL:   p4hir.func action @sub_assign_with_serenum
action sub_assign_with_serenum() {
    // CHECK:           %[[var_lhs:.*]] = p4hir.variable ["lhs"] : <!b10i>
    // CHECK:           %[[const_serenum_first:.*]] = p4hir.const #Serenum_first
    // CHECK:           %[[val_lhs:.*]] = p4hir.read %[[var_lhs]] : <!b10i>
    // CHECK:           %[[val_rhs:.*]] = p4hir.cast(%[[const_serenum_first]] : !Serenum) : !b10i
    // CHECK:           %[[val_binop_res:.*]] = p4hir.binop(sub, %[[val_lhs]], %[[val_rhs]]) : !b10i
    // CHECK:           p4hir.assign %[[val_binop_res]], %[[var_lhs]] : <!b10i>
    // CHECK:           p4hir.return
    
    bit<10> lhs;
    lhs -= Serenum.first;
}

// CHECK-LABEL:   p4hir.func action @sadd_assign_with_var
action sadd_assign_with_var() {
    // CHECK:           %[[var_lhs:.*]] = p4hir.variable ["lhs"] : <!b10i>
    // CHECK:           %[[var_rhs:.*]] = p4hir.variable ["rhs"] : <!b10i>
    // CHECK:           %[[val_lhs:.*]] = p4hir.read %[[var_lhs]] : <!b10i>
    // CHECK:           %[[val_rhs:.*]] = p4hir.read %[[var_rhs]] : <!b10i>
    // CHECK:           %[[val_binop_res:.*]] = p4hir.binop(sadd, %[[val_lhs]], %[[val_rhs]]) : !b10i
    // CHECK:           p4hir.assign %[[val_binop_res]], %[[var_lhs]] : <!b10i>
    // CHECK:           p4hir.return

    bit<10> lhs;
    bit<10> rhs;
    lhs |+|= rhs;
}

// CHECK-LABEL:   p4hir.func action @sadd_assign_with_const
action sadd_assign_with_const() {
    // CHECK:           %[[var_lhs:.*]] = p4hir.variable ["lhs"] : <!b10i>
    // CHECK:           %[[val_int3_b10i:.*]] = p4hir.const #int3_b10i
    // CHECK:           %[[val_rhs:.*]] = p4hir.cast(%[[val_int3_b10i]] : !b10i) : !b10i
    // CHECK:           %[[val_lhs:.*]] = p4hir.read %[[var_lhs]] : <!b10i>
    // CHECK:           %[[val_binop_res:.*]] = p4hir.binop(sadd, %[[val_lhs]], %[[val_rhs]]) : !b10i
    // CHECK:           p4hir.assign %[[val_binop_res]], %[[var_lhs]] : <!b10i>
    // CHECK:           p4hir.return

    bit<10> lhs;
    lhs |+|= 3;
}

// CHECK-LABEL:   p4hir.func action @sadd_assign_with_serenum
action sadd_assign_with_serenum() {
    // CHECK:           %[[var_lhs:.*]] = p4hir.variable ["lhs"] : <!b10i>
    // CHECK:           %[[const_serenum_first:.*]] = p4hir.const #Serenum_first
    // CHECK:           %[[val_lhs:.*]] = p4hir.read %[[var_lhs]] : <!b10i>
    // CHECK:           %[[val_rhs:.*]] = p4hir.cast(%[[const_serenum_first]] : !Serenum) : !b10i
    // CHECK:           %[[val_binop_res:.*]] = p4hir.binop(sadd, %[[val_lhs]], %[[val_rhs]]) : !b10i
    // CHECK:           p4hir.assign %[[val_binop_res]], %[[var_lhs]] : <!b10i>
    // CHECK:           p4hir.return
    
    bit<10> lhs;
    lhs |+|= Serenum.first;
}

// CHECK-LABEL:   p4hir.func action @ssub_assign_with_var
action ssub_assign_with_var() {
    // CHECK:           %[[var_lhs:.*]] = p4hir.variable ["lhs"] : <!b10i>
    // CHECK:           %[[var_rhs:.*]] = p4hir.variable ["rhs"] : <!b10i>
    // CHECK:           %[[val_lhs:.*]] = p4hir.read %[[var_lhs]] : <!b10i>
    // CHECK:           %[[val_rhs:.*]] = p4hir.read %[[var_rhs]] : <!b10i>
    // CHECK:           %[[val_binop_res:.*]] = p4hir.binop(ssub, %[[val_lhs]], %[[val_rhs]]) : !b10i
    // CHECK:           p4hir.assign %[[val_binop_res]], %[[var_lhs]] : <!b10i>
    // CHECK:           p4hir.return

    bit<10> lhs;
    bit<10> rhs;
    lhs |-|= rhs;
}

// CHECK-LABEL:   p4hir.func action @ssub_assign_with_const
action ssub_assign_with_const() {
    // CHECK:           %[[var_lhs:.*]] = p4hir.variable ["lhs"] : <!b10i>
    // CHECK:           %[[val_int3_b10i:.*]] = p4hir.const #int3_b10i
    // CHECK:           %[[val_rhs:.*]] = p4hir.cast(%[[val_int3_b10i]] : !b10i) : !b10i
    // CHECK:           %[[val_lhs:.*]] = p4hir.read %[[var_lhs]] : <!b10i>
    // CHECK:           %[[val_binop_res:.*]] = p4hir.binop(ssub, %[[val_lhs]], %[[val_rhs]]) : !b10i
    // CHECK:           p4hir.assign %[[val_binop_res]], %[[var_lhs]] : <!b10i>
    // CHECK:           p4hir.return

    bit<10> lhs;
    lhs |-|= 3;
}

// CHECK-LABEL:   p4hir.func action @ssub_assign_with_serenum
action ssub_assign_with_serenum() {
    // CHECK:           %[[var_lhs:.*]] = p4hir.variable ["lhs"] : <!b10i>
    // CHECK:           %[[const_serenum_first:.*]] = p4hir.const #Serenum_first
    // CHECK:           %[[val_lhs:.*]] = p4hir.read %[[var_lhs]] : <!b10i>
    // CHECK:           %[[val_rhs:.*]] = p4hir.cast(%[[const_serenum_first]] : !Serenum) : !b10i
    // CHECK:           %[[val_binop_res:.*]] = p4hir.binop(ssub, %[[val_lhs]], %[[val_rhs]]) : !b10i
    // CHECK:           p4hir.assign %[[val_binop_res]], %[[var_lhs]] : <!b10i>
    // CHECK:           p4hir.return
    
    bit<10> lhs;
    lhs |-|= Serenum.first;
}

// CHECK-LABEL:   p4hir.func action @shl_assign_with_var
action shl_assign_with_var() {
    // CHECK:           %[[var_lhs:.*]] = p4hir.variable ["lhs"] : <!b10i>
    // CHECK:           %[[var_rhs:.*]] = p4hir.variable ["rhs"] : <!b10i>
    // CHECK:           %[[val_lhs:.*]] = p4hir.read %[[var_lhs]] : <!b10i>
    // CHECK:           %[[val_rhs:.*]] = p4hir.read %[[var_rhs]] : <!b10i>
    // CHECK:           %[[val_shl_res:.*]] = p4hir.shl(%[[val_lhs]], %[[val_rhs]] : !b10i) : !b10i
    // CHECK:           p4hir.assign %[[val_shl_res]], %[[var_lhs]] : <!b10i>
    // CHECK:           p4hir.return

    bit<10> lhs;
    bit<10> rhs;
    lhs <<= rhs;
}

// CHECK-LABEL:   p4hir.func action @shl_assign_with_const
action shl_assign_with_const() {
    // CHECK:           %[[var_lhs:.*]] = p4hir.variable ["lhs"] : <!b10i>
    // CHECK:           %[[val_int3_infint:.*]] = p4hir.const #int3_infint
    // CHECK:           %[[val_lhs:.*]] = p4hir.read %[[var_lhs]] : <!b10i>
    // CHECK:           %[[val_rhs:.*]] = p4hir.cast(%[[val_int3_infint]] : !infint) : !b10i
    // CHECK:           %[[val_shl_res:.*]] = p4hir.shl(%[[val_lhs]], %[[val_rhs]] : !b10i) : !b10i
    // CHECK:           p4hir.assign %[[val_shl_res]], %[[var_lhs]] : <!b10i>
    // CHECK:           p4hir.return

    bit<10> lhs;
    lhs <<= 3;
}

// CHECK-LABEL:   p4hir.func action @shl_assign_with_serenum
action shl_assign_with_serenum() {
    // CHECK:           %[[var_lhs:.*]] = p4hir.variable ["lhs"] : <!b10i>
    // CHECK:           %[[const_serenum_first:.*]] = p4hir.const #Serenum_first
    // CHECK:           %[[val_lhs:.*]] = p4hir.read %[[var_lhs]] : <!b10i>
    // CHECK:           %[[val_rhs:.*]] = p4hir.cast(%[[const_serenum_first]] : !Serenum) : !b10i
    // CHECK:           %[[val_shl_res:.*]] = p4hir.shl(%[[val_lhs]], %[[val_rhs]] : !b10i) : !b10i
    // CHECK:           p4hir.assign %[[val_shl_res]], %[[var_lhs]] : <!b10i>
    // CHECK:           p4hir.return

    bit<10> lhs;
    lhs <<= Serenum.first;
}

// CHECK-LABEL:   p4hir.func action @shr_assign_with_var
action shr_assign_with_var() {
    // CHECK:           %[[var_lhs:.*]] = p4hir.variable ["lhs"] : <!b10i>
    // CHECK:           %[[var_rhs:.*]] = p4hir.variable ["rhs"] : <!b10i>
    // CHECK:           %[[val_lhs:.*]] = p4hir.read %[[var_lhs]] : <!b10i>
    // CHECK:           %[[val_rhs:.*]] = p4hir.read %[[var_rhs]] : <!b10i>
    // CHECK:           %[[val_shr_res:.*]] = p4hir.shr(%[[val_lhs]], %[[val_rhs]] : !b10i) : !b10i
    // CHECK:           p4hir.assign %[[val_shr_res]], %[[var_lhs]] : <!b10i>
    // CHECK:           p4hir.return

    bit<10> lhs;
    bit<10> rhs;
    lhs >>= rhs;
}

// CHECK-LABEL:   p4hir.func action @shr_assign_with_const
action shr_assign_with_const() {
    // CHECK:           %[[var_lhs:.*]] = p4hir.variable ["lhs"] : <!b10i>
    // CHECK:           %[[val_int3_infint:.*]] = p4hir.const #int3_infint
    // CHECK:           %[[val_lhs:.*]] = p4hir.read %[[var_lhs]] : <!b10i>
    // CHECK:           %[[val_rhs:.*]] = p4hir.cast(%[[val_int3_infint]] : !infint) : !b10i
    // CHECK:           %[[val_shr_res:.*]] = p4hir.shr(%[[val_lhs]], %[[val_rhs]] : !b10i) : !b10i
    // CHECK:           p4hir.assign %[[val_shr_res]], %[[var_lhs]] : <!b10i>
    // CHECK:           p4hir.return

    bit<10> lhs;
    lhs >>= 3;
}

// CHECK-LABEL:   p4hir.func action @shr_assign_with_serenum
action shr_assign_with_serenum() {
    // CHECK:           %[[var_lhs:.*]] = p4hir.variable ["lhs"] : <!b10i>
    // CHECK:           %[[const_serenum_first:.*]] = p4hir.const #Serenum_first
    // CHECK:           %[[val_lhs:.*]] = p4hir.read %[[var_lhs]] : <!b10i>
    // CHECK:           %[[val_rhs:.*]] = p4hir.cast(%[[const_serenum_first]] : !Serenum) : !b10i
    // CHECK:           %[[val_shr_res:.*]] = p4hir.shr(%[[val_lhs]], %[[val_rhs]] : !b10i) : !b10i
    // CHECK:           p4hir.assign %[[val_shr_res]], %[[var_lhs]] : <!b10i>
    // CHECK:           p4hir.return

    bit<10> lhs;
    lhs >>= Serenum.first;
}


// CHECK-LABEL:   p4hir.func action @and_assign
action and_assign_with_var() {
    // CHECK:           %[[var_lhs:.*]] = p4hir.variable ["lhs"] : <!b10i>
    // CHECK:           %[[var_rhs:.*]] = p4hir.variable ["rhs"] : <!b10i>
    // CHECK:           %[[val_lhs:.*]] = p4hir.read %[[var_lhs]] : <!b10i>
    // CHECK:           %[[val_rhs:.*]] = p4hir.read %[[var_rhs]] : <!b10i>
    // CHECK:           %[[val_binop_res:.*]] = p4hir.binop(and, %[[val_lhs]], %[[val_rhs]]) : !b10i
    // CHECK:           p4hir.assign %[[val_binop_res]], %[[var_lhs]] : <!b10i>
    // CHECK:           p4hir.return

    bit<10> lhs;
    bit<10> rhs;
    lhs &= rhs;
}

// CHECK-LABEL:   p4hir.func action @and_assign_with_const
action and_assign_with_const() {
    // CHECK:           %[[var_lhs:.*]] = p4hir.variable ["lhs"] : <!b10i>
    // CHECK:           %[[val_int3_b10i:.*]] = p4hir.const #int3_b10i
    // CHECK:           %[[val_rhs:.*]] = p4hir.cast(%[[val_int3_b10i]] : !b10i) : !b10i
    // CHECK:           %[[val_lhs:.*]] = p4hir.read %[[var_lhs]] : <!b10i>
    // CHECK:           %[[val_binop_res:.*]] = p4hir.binop(and, %[[val_lhs]], %[[val_rhs]]) : !b10i
    // CHECK:           p4hir.assign %[[val_binop_res]], %[[var_lhs]] : <!b10i>
    // CHECK:           p4hir.return

    bit<10> lhs;
    lhs &= 3;
}

// CHECK-LABEL:   p4hir.func action @and_assign_with_serenum
action and_assign_with_serenum() {
    // CHECK:           %[[var_lhs:.*]] = p4hir.variable ["lhs"] : <!b10i>
    // CHECK:           %[[const_serenum_first:.*]] = p4hir.const #Serenum_first
    // CHECK:           %[[val_lhs:.*]] = p4hir.read %[[var_lhs]] : <!b10i>
    // CHECK:           %[[val_rhs:.*]] = p4hir.cast(%[[const_serenum_first]] : !Serenum) : !b10i
    // CHECK:           %[[val_binop_res:.*]] = p4hir.binop(and, %[[val_lhs]], %[[val_rhs]]) : !b10i
    // CHECK:           p4hir.assign %[[val_binop_res]], %[[var_lhs]] : <!b10i>
    // CHECK:           p4hir.return
    
    bit<10> lhs;
    lhs &= Serenum.first;
}

// CHECK-LABEL:   p4hir.func action @or_assign_with_var
action or_assign_with_var() {
    // CHECK:           %[[var_lhs:.*]] = p4hir.variable ["lhs"] : <!b10i>
    // CHECK:           %[[var_rhs:.*]] = p4hir.variable ["rhs"] : <!b10i>
    // CHECK:           %[[val_lhs:.*]] = p4hir.read %[[var_lhs]] : <!b10i>
    // CHECK:           %[[val_rhs:.*]] = p4hir.read %[[var_rhs]] : <!b10i>
    // CHECK:           %[[val_binop_res:.*]] = p4hir.binop(or, %[[val_lhs]], %[[val_rhs]]) : !b10i
    // CHECK:           p4hir.assign %[[val_binop_res]], %[[var_lhs]] : <!b10i>
    // CHECK:           p4hir.return

    bit<10> lhs;
    bit<10> rhs;
    lhs |= rhs;
}

// CHECK-LABEL:   p4hir.func action @or_assign_with_const
action or_assign_with_const() {
    // CHECK:           %[[var_lhs:.*]] = p4hir.variable ["lhs"] : <!b10i>
    // CHECK:           %[[val_int3_b10i:.*]] = p4hir.const #int3_b10i
    // CHECK:           %[[val_rhs:.*]] = p4hir.cast(%[[val_int3_b10i]] : !b10i) : !b10i
    // CHECK:           %[[val_lhs:.*]] = p4hir.read %[[var_lhs]] : <!b10i>
    // CHECK:           %[[val_binop_res:.*]] = p4hir.binop(or, %[[val_lhs]], %[[val_rhs]]) : !b10i
    // CHECK:           p4hir.assign %[[val_binop_res]], %[[var_lhs]] : <!b10i>
    // CHECK:           p4hir.return

    bit<10> lhs;
    lhs |= 3;
}

// CHECK-LABEL:   p4hir.func action @or_assign_with_serenum
action or_assign_with_serenum() {
    // CHECK:           %[[var_lhs:.*]] = p4hir.variable ["lhs"] : <!b10i>
    // CHECK:           %[[const_serenum_first:.*]] = p4hir.const #Serenum_first
    // CHECK:           %[[val_lhs:.*]] = p4hir.read %[[var_lhs]] : <!b10i>
    // CHECK:           %[[val_rhs:.*]] = p4hir.cast(%[[const_serenum_first]] : !Serenum) : !b10i
    // CHECK:           %[[val_binop_res:.*]] = p4hir.binop(or, %[[val_lhs]], %[[val_rhs]]) : !b10i
    // CHECK:           p4hir.assign %[[val_binop_res]], %[[var_lhs]] : <!b10i>
    // CHECK:           p4hir.return
    
    bit<10> lhs;
    lhs |= Serenum.first;
}

// CHECK-LABEL:   p4hir.func action @xor_assign_with_var
action xor_assign_with_var() {
    // CHECK:           %[[var_lhs:.*]] = p4hir.variable ["lhs"] : <!b10i>
    // CHECK:           %[[var_rhs:.*]] = p4hir.variable ["rhs"] : <!b10i>
    // CHECK:           %[[val_lhs:.*]] = p4hir.read %[[var_lhs]] : <!b10i>
    // CHECK:           %[[val_rhs:.*]] = p4hir.read %[[var_rhs]] : <!b10i>
    // CHECK:           %[[val_binop_res:.*]] = p4hir.binop(xor, %[[val_lhs]], %[[val_rhs]]) : !b10i
    // CHECK:           p4hir.assign %[[val_binop_res]], %[[var_lhs]] : <!b10i>
    // CHECK:           p4hir.return

    bit<10> lhs;
    bit<10> rhs;
    lhs ^= rhs;
}

// CHECK-LABEL:   p4hir.func action @xor_assign_with_const
action xor_assign_with_const() {
    // CHECK:           %[[var_lhs:.*]] = p4hir.variable ["lhs"] : <!b10i>
    // CHECK:           %[[val_int3_b10i:.*]] = p4hir.const #int3_b10i
    // CHECK:           %[[val_rhs:.*]] = p4hir.cast(%[[val_int3_b10i]] : !b10i) : !b10i
    // CHECK:           %[[val_lhs:.*]] = p4hir.read %[[var_lhs]] : <!b10i>
    // CHECK:           %[[val_binop_res:.*]] = p4hir.binop(xor, %[[val_lhs]], %[[val_rhs]]) : !b10i
    // CHECK:           p4hir.assign %[[val_binop_res]], %[[var_lhs]] : <!b10i>
    // CHECK:           p4hir.return

    bit<10> lhs;
    lhs ^= 3;
}

// CHECK-LABEL:   p4hir.func action @xor_assign_with_serenum
action xor_assign_with_serenum() {
    // CHECK:           %[[var_lhs:.*]] = p4hir.variable ["lhs"] : <!b10i>
    // CHECK:           %[[const_serenum_first:.*]] = p4hir.const #Serenum_first
    // CHECK:           %[[val_lhs:.*]] = p4hir.read %[[var_lhs]] : <!b10i>
    // CHECK:           %[[val_rhs:.*]] = p4hir.cast(%[[const_serenum_first]] : !Serenum) : !b10i
    // CHECK:           %[[val_binop_res:.*]] = p4hir.binop(xor, %[[val_lhs]], %[[val_rhs]]) : !b10i
    // CHECK:           p4hir.assign %[[val_binop_res]], %[[var_lhs]] : <!b10i>
    // CHECK:           p4hir.return
    
    bit<10> lhs;
    lhs ^= Serenum.first;
}
