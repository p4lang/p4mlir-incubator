// RUN: p4mlir-translate --typeinference-only %s | FileCheck %s

// NOTE: Assertions have been autogenerated by utils/generate-test-checks.py

// CHECK: #[[const_int3_b10i:.+]] = #p4hir.int<3> : !b10i
// CHECK: #[[const_int3_infint:.+]] = #p4hir.int<3> : !infint
// CHECK: #[[const_int42_b10i:.+]] = #p4hir.int<42> : !b10i
// CHECK: #[[enum_field_serenum_first:.+]] = #p4hir.enum_field<first, !Serenum> : !Serenum

enum bit<10> Serenum {
  first = 42
}

// CHECK-LABEL:   p4hir.func action @assign
// CHECK-SAME:        %[[arg_a:.*]]: !b10i {{.*}}, %[[arg_b:.*]]: !b10i {{.*}}, %[[arg_res:.*]]: !p4hir.ref<!b10i> {{.*}}
// CHECK:           p4hir.assign %[[arg_a]], %[[arg_res]] : <!b10i>
// CHECK:           %[[binop_add:.*]] = p4hir.binop(add, %[[arg_a]], %[[arg_b]]) : !b10i
// CHECK:           p4hir.assign %[[binop_add]], %[[arg_res]] : <!b10i>
// CHECK:           p4hir.return

action assign(in bit<10> a, in bit<10> b, out bit<10> res) {
    res = a;
    res = a + b;
}

// CHECK-LABEL:   p4hir.func action @bit_mul_assign_bit
// CHECK-SAME:        %[[arg_lhs:.*]]: !p4hir.ref<!b10i> {{.*}}, %[[arg_rhs:.*]]: !b10i {{.*}}
// CHECK:           %[[val_lhs:.*]] = p4hir.read %[[arg_lhs]] : <!b10i>
// CHECK:           %[[val_binop_mul:.*]] = p4hir.binop(mul, %[[val_lhs]], %[[arg_rhs]]) : !b10i
// CHECK:           p4hir.assign %[[val_binop_mul]], %[[arg_lhs]] : <!b10i>
// CHECK:           p4hir.return

action bit_mul_assign_bit(inout bit<10> lhs, in bit<10> rhs) {
    lhs *= rhs;
}

// CHECK-LABEL:   p4hir.func action @bit_mul_assign_const
// CHECK-SAME:        %[[arg_lhs:.*]]: !p4hir.ref<!b10i> {{.*}}
// CHECK:           %[[const_int3_b10i:.*]] = p4hir.const #int3_b10i
// CHECK:           %[[val_rhs:.*]] = p4hir.cast(%[[const_int3_b10i]] : !b10i) : !b10i
// CHECK:           %[[val_lhs:.*]] = p4hir.read %[[arg_lhs]] : <!b10i>
// CHECK:           %[[val_binop_mul:.*]] = p4hir.binop(mul, %[[val_lhs]], %[[val_rhs]]) : !b10i
// CHECK:           p4hir.assign %[[val_binop_mul]], %[[arg_lhs]] : <!b10i>
// CHECK:           p4hir.return

action bit_mul_assign_const(inout bit<10> lhs) {
    lhs *= 3;
}

// CHECK-LABEL:   p4hir.func action @bit_mul_assign_serenum_field
// CHECK-SAME:        %[[arg_lhs:.*]]: !p4hir.ref<!b10i> {{.*}}
// CHECK:           %[[enum_field_serenum_first:.*]] = p4hir.const #Serenum_first
// CHECK:           %[[val_lhs:.*]] = p4hir.read %[[arg_lhs]] : <!b10i>
// CHECK:           %[[val_rhs:.*]] = p4hir.cast(%[[enum_field_serenum_first]] : !Serenum) : !b10i
// CHECK:           %[[val_binop_mul:.*]] = p4hir.binop(mul, %[[val_lhs]], %[[val_rhs]]) : !b10i
// CHECK:           p4hir.assign %[[val_binop_mul]], %[[arg_lhs]] : <!b10i>
// CHECK:           p4hir.return

action bit_mul_assign_serenum_field(inout bit<10> lhs) {
    lhs *= Serenum.first;
}

// CHECK-LABEL:   p4hir.func action @bit_div_assign_bit
// CHECK-SAME:        %[[arg_lhs:.*]]: !p4hir.ref<!b10i> {{.*}}, %[[arg_rhs:.*]]: !b10i {{.*}}
// CHECK:           %[[val_lhs:.*]] = p4hir.read %[[arg_lhs]] : <!b10i>
// CHECK:           %[[val_binop_div:.*]] = p4hir.binop(div, %[[val_lhs]], %[[arg_rhs]]) : !b10i
// CHECK:           p4hir.assign %[[val_binop_div]], %[[arg_lhs]] : <!b10i>
// CHECK:           p4hir.return

action bit_div_assign_bit(inout bit<10> lhs, in bit<10> rhs) {
    lhs /= rhs;
}

// CHECK-LABEL:   p4hir.func action @bit_div_assign_const
// CHECK-SAME:        %[[arg_lhs:.*]]: !p4hir.ref<!b10i> {{.*}}
// CHECK:           %[[const_int3_b10i:.*]] = p4hir.const #int3_b10i
// CHECK:           %[[val_rhs:.*]] = p4hir.cast(%[[const_int3_b10i]] : !b10i) : !b10i
// CHECK:           %[[val_lhs:.*]] = p4hir.read %[[arg_lhs]] : <!b10i>
// CHECK:           %[[val_binop_div:.*]] = p4hir.binop(div, %[[val_lhs]], %[[val_rhs]]) : !b10i
// CHECK:           p4hir.assign %[[val_binop_div]], %[[arg_lhs]] : <!b10i>
// CHECK:           p4hir.return

action bit_div_assign_const(inout bit<10> lhs) {
    lhs /= 3;
}

// CHECK-LABEL:   p4hir.func action @bit_div_assign_serenum_field
// CHECK-SAME:        %[[arg_lhs:.*]]: !p4hir.ref<!b10i> {{.*}}
// CHECK:           %[[enum_field_serenum_first:.*]] = p4hir.const #Serenum_first
// CHECK:           %[[val_lhs:.*]] = p4hir.read %[[arg_lhs]] : <!b10i>
// CHECK:           %[[val_rhs:.*]] = p4hir.cast(%[[enum_field_serenum_first]] : !Serenum) : !b10i
// CHECK:           %[[val_binop_div:.*]] = p4hir.binop(div, %[[val_lhs]], %[[val_rhs]]) : !b10i
// CHECK:           p4hir.assign %[[val_binop_div]], %[[arg_lhs]] : <!b10i>
// CHECK:           p4hir.return

action bit_div_assign_serenum_field(inout bit<10> lhs) {
    lhs /= Serenum.first;
}

// CHECK-LABEL:   p4hir.func action @bit_mod_assign_bit
// CHECK-SAME:        %[[arg_lhs:.*]]: !p4hir.ref<!b10i> {{.*}}, %[[arg_rhs:.*]]: !b10i {{.*}}
// CHECK:           %[[val_lhs:.*]] = p4hir.read %[[arg_lhs]] : <!b10i>
// CHECK:           %[[val_binop_mod:.*]] = p4hir.binop(mod, %[[val_lhs]], %[[arg_rhs]]) : !b10i
// CHECK:           p4hir.assign %[[val_binop_mod]], %[[arg_lhs]] : <!b10i>
// CHECK:           p4hir.return

action bit_mod_assign_bit(inout bit<10> lhs, in bit<10> rhs) {
    lhs %= rhs;
}

// CHECK-LABEL:   p4hir.func action @bit_mod_assign_const
// CHECK-SAME:        %[[arg_lhs:.*]]: !p4hir.ref<!b10i> {{.*}}
// CHECK:           %[[const_int3_b10i:.*]] = p4hir.const #int3_b10i
// CHECK:           %[[val_rhs:.*]] = p4hir.cast(%[[const_int3_b10i]] : !b10i) : !b10i
// CHECK:           %[[val_lhs:.*]] = p4hir.read %[[arg_lhs]] : <!b10i>
// CHECK:           %[[val_binop_mod:.*]] = p4hir.binop(mod, %[[val_lhs]], %[[val_rhs]]) : !b10i
// CHECK:           p4hir.assign %[[val_binop_mod]], %[[arg_lhs]] : <!b10i>
// CHECK:           p4hir.return

action bit_mod_assign_const(inout bit<10> lhs) {
    lhs %= 3;
}

// CHECK-LABEL:   p4hir.func action @bit_mod_assign_serenum_field
// CHECK-SAME:        %[[arg_lhs:.*]]: !p4hir.ref<!b10i> {{.*}}
// CHECK:           %[[enum_field_serenum_first:.*]] = p4hir.const #Serenum_first
// CHECK:           %[[val_lhs:.*]] = p4hir.read %[[arg_lhs]] : <!b10i>
// CHECK:           %[[val_rhs:.*]] = p4hir.cast(%[[enum_field_serenum_first]] : !Serenum) : !b10i
// CHECK:           %[[val_binop_mod:.*]] = p4hir.binop(mod, %[[val_lhs]], %[[val_rhs]]) : !b10i
// CHECK:           p4hir.assign %[[val_binop_mod]], %[[arg_lhs]] : <!b10i>
// CHECK:           p4hir.return

action bit_mod_assign_serenum_field(inout bit<10> lhs) {
    lhs %= Serenum.first;
}

// CHECK-LABEL:   p4hir.func action @bit_add_assign_bit
// CHECK-SAME:        %[[arg_lhs:.*]]: !p4hir.ref<!b10i> {{.*}}, %[[arg_rhs:.*]]: !b10i {{.*}}
// CHECK:           %[[val_lhs:.*]] = p4hir.read %[[arg_lhs]] : <!b10i>
// CHECK:           %[[val_binop_add:.*]] = p4hir.binop(add, %[[val_lhs]], %[[arg_rhs]]) : !b10i
// CHECK:           p4hir.assign %[[val_binop_add]], %[[arg_lhs]] : <!b10i>
// CHECK:           p4hir.return

action bit_add_assign_bit(inout bit<10> lhs, in bit<10> rhs) {
    lhs += rhs;
}

// CHECK-LABEL:   p4hir.func action @bit_add_assign_const
// CHECK-SAME:        %[[arg_lhs:.*]]: !p4hir.ref<!b10i> {{.*}}
// CHECK:           %[[const_int3_b10i:.*]] = p4hir.const #int3_b10i
// CHECK:           %[[val_rhs:.*]] = p4hir.cast(%[[const_int3_b10i]] : !b10i) : !b10i
// CHECK:           %[[val_lhs:.*]] = p4hir.read %[[arg_lhs]] : <!b10i>
// CHECK:           %[[val_binop_add:.*]] = p4hir.binop(add, %[[val_lhs]], %[[val_rhs]]) : !b10i
// CHECK:           p4hir.assign %[[val_binop_add]], %[[arg_lhs]] : <!b10i>
// CHECK:           p4hir.return

action bit_add_assign_const(inout bit<10> lhs) {
    lhs += 3;
}

// CHECK-LABEL:   p4hir.func action @bit_add_assign_serenum_field
// CHECK-SAME:        %[[arg_lhs:.*]]: !p4hir.ref<!b10i> {{.*}}
// CHECK:           %[[enum_field_serenum_first:.*]] = p4hir.const #Serenum_first
// CHECK:           %[[val_lhs:.*]] = p4hir.read %[[arg_lhs]] : <!b10i>
// CHECK:           %[[val_rhs:.*]] = p4hir.cast(%[[enum_field_serenum_first]] : !Serenum) : !b10i
// CHECK:           %[[val_binop_add:.*]] = p4hir.binop(add, %[[val_lhs]], %[[val_rhs]]) : !b10i
// CHECK:           p4hir.assign %[[val_binop_add]], %[[arg_lhs]] : <!b10i>
// CHECK:           p4hir.return

action bit_add_assign_serenum_field(inout bit<10> lhs) {
    lhs += Serenum.first;
}

// CHECK-LABEL:   p4hir.func action @bit_sub_assign_bit
// CHECK-SAME:        %[[arg_lhs:.*]]: !p4hir.ref<!b10i> {{.*}}, %[[arg_rhs:.*]]: !b10i {{.*}}
// CHECK:           %[[val_lhs:.*]] = p4hir.read %[[arg_lhs]] : <!b10i>
// CHECK:           %[[val_binop_sub:.*]] = p4hir.binop(sub, %[[val_lhs]], %[[arg_rhs]]) : !b10i
// CHECK:           p4hir.assign %[[val_binop_sub]], %[[arg_lhs]] : <!b10i>
// CHECK:           p4hir.return

action bit_sub_assign_bit(inout bit<10> lhs, in bit<10> rhs) {
    lhs -= rhs;
}

// CHECK-LABEL:   p4hir.func action @bit_sub_assign_const
// CHECK-SAME:        %[[arg_lhs:.*]]: !p4hir.ref<!b10i> {{.*}}
// CHECK:           %[[const_int3_b10i:.*]] = p4hir.const #int3_b10i
// CHECK:           %[[val_rhs:.*]] = p4hir.cast(%[[const_int3_b10i]] : !b10i) : !b10i
// CHECK:           %[[val_lhs:.*]] = p4hir.read %[[arg_lhs]] : <!b10i>
// CHECK:           %[[val_binop_sub:.*]] = p4hir.binop(sub, %[[val_lhs]], %[[val_rhs]]) : !b10i
// CHECK:           p4hir.assign %[[val_binop_sub]], %[[arg_lhs]] : <!b10i>
// CHECK:           p4hir.return

action bit_sub_assign_const(inout bit<10> lhs) {
    lhs -= 3;
}

// CHECK-LABEL:   p4hir.func action @bit_sub_assign_serenum_field
// CHECK-SAME:        %[[arg_lhs:.*]]: !p4hir.ref<!b10i> {{.*}}
// CHECK:           %[[enum_field_serenum_first:.*]] = p4hir.const #Serenum_first
// CHECK:           %[[val_lhs:.*]] = p4hir.read %[[arg_lhs]] : <!b10i>
// CHECK:           %[[val_rhs:.*]] = p4hir.cast(%[[enum_field_serenum_first]] : !Serenum) : !b10i
// CHECK:           %[[val_binop_sub:.*]] = p4hir.binop(sub, %[[val_lhs]], %[[val_rhs]]) : !b10i
// CHECK:           p4hir.assign %[[val_binop_sub]], %[[arg_lhs]] : <!b10i>
// CHECK:           p4hir.return

action bit_sub_assign_serenum_field(inout bit<10> lhs) {
    lhs -= Serenum.first;
}

// CHECK-LABEL:   p4hir.func action @bit_sadd_assign_bit
// CHECK-SAME:        %[[arg_lhs:.*]]: !p4hir.ref<!b10i> {{.*}}, %[[arg_rhs:.*]]: !b10i {{.*}}
// CHECK:           %[[val_lhs:.*]] = p4hir.read %[[arg_lhs]] : <!b10i>
// CHECK:           %[[val_binop_sadd:.*]] = p4hir.binop(sadd, %[[val_lhs]], %[[arg_rhs]]) : !b10i
// CHECK:           p4hir.assign %[[val_binop_sadd]], %[[arg_lhs]] : <!b10i>
// CHECK:           p4hir.return

action bit_sadd_assign_bit(inout bit<10> lhs, in bit<10> rhs) {
    lhs |+|= rhs;
}

// CHECK-LABEL:   p4hir.func action @bit_sadd_assign_const
// CHECK-SAME:        %[[arg_lhs:.*]]: !p4hir.ref<!b10i> {{.*}}
// CHECK:           %[[const_int3_b10i:.*]] = p4hir.const #int3_b10i
// CHECK:           %[[val_rhs:.*]] = p4hir.cast(%[[const_int3_b10i]] : !b10i) : !b10i
// CHECK:           %[[val_lhs:.*]] = p4hir.read %[[arg_lhs]] : <!b10i>
// CHECK:           %[[val_binop_sadd:.*]] = p4hir.binop(sadd, %[[val_lhs]], %[[val_rhs]]) : !b10i
// CHECK:           p4hir.assign %[[val_binop_sadd]], %[[arg_lhs]] : <!b10i>
// CHECK:           p4hir.return

action bit_sadd_assign_const(inout bit<10> lhs) {
    lhs |+|= 3;
}

// CHECK-LABEL:   p4hir.func action @bit_sadd_assign_serenum_field
// CHECK-SAME:        %[[arg_lhs:.*]]: !p4hir.ref<!b10i> {{.*}}
// CHECK:           %[[enum_field_serenum_first:.*]] = p4hir.const #Serenum_first
// CHECK:           %[[val_lhs:.*]] = p4hir.read %[[arg_lhs]] : <!b10i>
// CHECK:           %[[val_rhs:.*]] = p4hir.cast(%[[enum_field_serenum_first]] : !Serenum) : !b10i
// CHECK:           %[[val_binop_sadd:.*]] = p4hir.binop(sadd, %[[val_lhs]], %[[val_rhs]]) : !b10i
// CHECK:           p4hir.assign %[[val_binop_sadd]], %[[arg_lhs]] : <!b10i>
// CHECK:           p4hir.return

action bit_sadd_assign_serenum_field(inout bit<10> lhs) {
    lhs |+|= Serenum.first;
}

// CHECK-LABEL:   p4hir.func action @bit_ssub_assign_bit
// CHECK-SAME:        %[[arg_lhs:.*]]: !p4hir.ref<!b10i> {{.*}}, %[[arg_rhs:.*]]: !b10i {{.*}}
// CHECK:           %[[val_lhs:.*]] = p4hir.read %[[arg_lhs]] : <!b10i>
// CHECK:           %[[val_binop_ssub:.*]] = p4hir.binop(ssub, %[[val_lhs]], %[[arg_rhs]]) : !b10i
// CHECK:           p4hir.assign %[[val_binop_ssub]], %[[arg_lhs]] : <!b10i>
// CHECK:           p4hir.return

action bit_ssub_assign_bit(inout bit<10> lhs, in bit<10> rhs) {
    lhs |-|= rhs;
}

// CHECK-LABEL:   p4hir.func action @bit_ssub_assign_const
// CHECK-SAME:        %[[arg_lhs:.*]]: !p4hir.ref<!b10i> {{.*}}
// CHECK:           %[[const_int3_b10i:.*]] = p4hir.const #int3_b10i
// CHECK:           %[[val_rhs:.*]] = p4hir.cast(%[[const_int3_b10i]] : !b10i) : !b10i
// CHECK:           %[[val_lhs:.*]] = p4hir.read %[[arg_lhs]] : <!b10i>
// CHECK:           %[[val_binop_ssub:.*]] = p4hir.binop(ssub, %[[val_lhs]], %[[val_rhs]]) : !b10i
// CHECK:           p4hir.assign %[[val_binop_ssub]], %[[arg_lhs]] : <!b10i>
// CHECK:           p4hir.return

action bit_ssub_assign_const(inout bit<10> lhs) {
    lhs |-|= 3;
}

// CHECK-LABEL:   p4hir.func action @bit_ssub_assign_serenum_field
// CHECK-SAME:        %[[arg_lhs:.*]]: !p4hir.ref<!b10i> {{.*}}
// CHECK:           %[[enum_field_serenum_first:.*]] = p4hir.const #Serenum_first
// CHECK:           %[[val_lhs:.*]] = p4hir.read %[[arg_lhs]] : <!b10i>
// CHECK:           %[[val_rhs:.*]] = p4hir.cast(%[[enum_field_serenum_first]] : !Serenum) : !b10i
// CHECK:           %[[val_binop_ssub:.*]] = p4hir.binop(ssub, %[[val_lhs]], %[[val_rhs]]) : !b10i
// CHECK:           p4hir.assign %[[val_binop_ssub]], %[[arg_lhs]] : <!b10i>
// CHECK:           p4hir.return

action bit_ssub_assign_serenum_field(inout bit<10> lhs) {
    lhs |-|= Serenum.first;
}

// CHECK-LABEL:   p4hir.func action @bit_shl_assign_bit
// CHECK-SAME:        %[[arg_lhs:.*]]: !p4hir.ref<!b10i> {{.*}}, %[[arg_rhs:.*]]: !b10i {{.*}}
// CHECK:           %[[val_lhs:.*]] = p4hir.read %[[arg_lhs]] : <!b10i>
// CHECK:           %[[val_shlop:.*]] = p4hir.shl(%[[val_lhs]], %[[arg_rhs]] : !b10i) : !b10i
// CHECK:           p4hir.assign %[[val_shlop]], %[[arg_lhs]] : <!b10i>
// CHECK:           p4hir.return

action bit_shl_assign_bit(inout bit<10> lhs, in bit<10> rhs) {
    lhs <<= rhs;
}

// CHECK-LABEL:   p4hir.func action @bit_shl_assign_const
// CHECK-SAME:        %[[arg_lhs:.*]]: !p4hir.ref<!b10i> {{.*}}
// CHECK:           %[[const_int3_infint:.*]] = p4hir.const #int3_infint
// CHECK:           %[[val_lhs:.*]] = p4hir.read %[[arg_lhs]] : <!b10i>
// CHECK:           %[[val_rhs:.*]] = p4hir.cast(%[[const_int3_infint]] : !infint) : !b10i
// CHECK:           %[[val_shlop:.*]] = p4hir.shl(%[[val_lhs]], %[[val_rhs]] : !b10i) : !b10i
// CHECK:           p4hir.assign %[[val_shlop]], %[[arg_lhs]] : <!b10i>
// CHECK:           p4hir.return

action bit_shl_assign_const(inout bit<10> lhs) {
    lhs <<= 3;
}

// CHECK-LABEL:   p4hir.func action @bit_shl_assign_serenum_field
// CHECK-SAME:        %[[arg_lhs:.*]]: !p4hir.ref<!b10i> {{.*}}
// CHECK:           %[[enum_field_serenum_first:.*]] = p4hir.const #Serenum_first
// CHECK:           %[[val_lhs:.*]] = p4hir.read %[[arg_lhs]] : <!b10i>
// CHECK:           %[[val_rhs:.*]] = p4hir.cast(%[[enum_field_serenum_first]] : !Serenum) : !b10i
// CHECK:           %[[val_shlop:.*]] = p4hir.shl(%[[val_lhs]], %[[val_rhs]] : !b10i) : !b10i
// CHECK:           p4hir.assign %[[val_shlop]], %[[arg_lhs]] : <!b10i>
// CHECK:           p4hir.return

action bit_shl_assign_serenum_field(inout bit<10> lhs) {
    lhs <<= Serenum.first;
}

// CHECK-LABEL:   p4hir.func action @bit_shr_assign_bit
// CHECK-SAME:        %[[arg_lhs:.*]]: !p4hir.ref<!b10i> {{.*}}, %[[arg_rhs:.*]]: !b10i {{.*}}
// CHECK:           %[[val_lhs:.*]] = p4hir.read %[[arg_lhs]] : <!b10i>
// CHECK:           %[[val_shrop:.*]] = p4hir.shr(%[[val_lhs]], %[[arg_rhs]] : !b10i) : !b10i
// CHECK:           p4hir.assign %[[val_shrop]], %[[arg_lhs]] : <!b10i>
// CHECK:           p4hir.return

action bit_shr_assign_bit(inout bit<10> lhs, in bit<10> rhs) {
    lhs >>= rhs;
}

// CHECK-LABEL:   p4hir.func action @bit_shr_assign_const
// CHECK-SAME:        %[[arg_lhs:.*]]: !p4hir.ref<!b10i> {{.*}}
// CHECK:           %[[const_int3_infint:.*]] = p4hir.const #int3_infint
// CHECK:           %[[val_lhs:.*]] = p4hir.read %[[arg_lhs]] : <!b10i>
// CHECK:           %[[val_rhs:.*]] = p4hir.cast(%[[const_int3_infint]] : !infint) : !b10i
// CHECK:           %[[val_shrop:.*]] = p4hir.shr(%[[val_lhs]], %[[val_rhs]] : !b10i) : !b10i
// CHECK:           p4hir.assign %[[val_shrop]], %[[arg_lhs]] : <!b10i>
// CHECK:           p4hir.return

action bit_shr_assign_const(inout bit<10> lhs) {
    lhs >>= 3;
}

// CHECK-LABEL:   p4hir.func action @bit_shr_assign_serenum_field
// CHECK-SAME:        %[[arg_lhs:.*]]: !p4hir.ref<!b10i> {{.*}}
// CHECK:           %[[enum_field_serenum_first:.*]] = p4hir.const #Serenum_first
// CHECK:           %[[val_lhs:.*]] = p4hir.read %[[arg_lhs]] : <!b10i>
// CHECK:           %[[val_rhs:.*]] = p4hir.cast(%[[enum_field_serenum_first]] : !Serenum) : !b10i
// CHECK:           %[[val_shrop:.*]] = p4hir.shr(%[[val_lhs]], %[[val_rhs]] : !b10i) : !b10i
// CHECK:           p4hir.assign %[[val_shrop]], %[[arg_lhs]] : <!b10i>
// CHECK:           p4hir.return

action bit_shr_assign_serenum_field(inout bit<10> lhs) {
    lhs >>= Serenum.first;
}

// CHECK-LABEL:   p4hir.func action @bit_and_assign_bit
// CHECK-SAME:        %[[arg_lhs:.*]]: !p4hir.ref<!b10i> {{.*}}, %[[arg_rhs:.*]]: !b10i {{.*}}
// CHECK:           %[[val_lhs:.*]] = p4hir.read %[[arg_lhs]] : <!b10i>
// CHECK:           %[[val_binop_and:.*]] = p4hir.binop(and, %[[val_lhs]], %[[arg_rhs]]) : !b10i
// CHECK:           p4hir.assign %[[val_binop_and]], %[[arg_lhs]] : <!b10i>
// CHECK:           p4hir.return

action bit_and_assign_bit(inout bit<10> lhs, in bit<10> rhs) {
    lhs &= rhs;
}

// CHECK-LABEL:   p4hir.func action @bit_and_assign_const
// CHECK-SAME:        %[[arg_lhs:.*]]: !p4hir.ref<!b10i> {{.*}}
// CHECK:           %[[const_int3_b10i:.*]] = p4hir.const #int3_b10i
// CHECK:           %[[val_rhs:.*]] = p4hir.cast(%[[const_int3_b10i]] : !b10i) : !b10i
// CHECK:           %[[val_lhs:.*]] = p4hir.read %[[arg_lhs]] : <!b10i>
// CHECK:           %[[val_binop_and:.*]] = p4hir.binop(and, %[[val_lhs]], %[[val_rhs]]) : !b10i
// CHECK:           p4hir.assign %[[val_binop_and]], %[[arg_lhs]] : <!b10i>
// CHECK:           p4hir.return

action bit_and_assign_const(inout bit<10> lhs) {
    lhs &= 3;
}

// CHECK-LABEL:   p4hir.func action @bit_and_assign_serenum_field
// CHECK-SAME:        %[[arg_lhs:.*]]: !p4hir.ref<!b10i> {{.*}}
// CHECK:           %[[enum_field_serenum_first:.*]] = p4hir.const #Serenum_first
// CHECK:           %[[val_lhs:.*]] = p4hir.read %[[arg_lhs]] : <!b10i>
// CHECK:           %[[val_rhs:.*]] = p4hir.cast(%[[enum_field_serenum_first]] : !Serenum) : !b10i
// CHECK:           %[[val_binop_and:.*]] = p4hir.binop(and, %[[val_lhs]], %[[val_rhs]]) : !b10i
// CHECK:           p4hir.assign %[[val_binop_and]], %[[arg_lhs]] : <!b10i>
// CHECK:           p4hir.return

action bit_and_assign_serenum_field(inout bit<10> lhs) {
    lhs &= Serenum.first;
}

// CHECK-LABEL:   p4hir.func action @bit_or_assign_bit
// CHECK-SAME:        %[[arg_lhs:.*]]: !p4hir.ref<!b10i> {{.*}}, %[[arg_rhs:.*]]: !b10i {{.*}}
// CHECK:           %[[val_lhs:.*]] = p4hir.read %[[arg_lhs]] : <!b10i>
// CHECK:           %[[val_binop_or:.*]] = p4hir.binop(or, %[[val_lhs]], %[[arg_rhs]]) : !b10i
// CHECK:           p4hir.assign %[[val_binop_or]], %[[arg_lhs]] : <!b10i>
// CHECK:           p4hir.return

action bit_or_assign_bit(inout bit<10> lhs, in bit<10> rhs) {
    lhs |= rhs;
}

// CHECK-LABEL:   p4hir.func action @bit_or_assign_const
// CHECK-SAME:        %[[arg_lhs:.*]]: !p4hir.ref<!b10i> {{.*}}
// CHECK:           %[[const_int3_b10i:.*]] = p4hir.const #int3_b10i
// CHECK:           %[[val_rhs:.*]] = p4hir.cast(%[[const_int3_b10i]] : !b10i) : !b10i
// CHECK:           %[[val_lhs:.*]] = p4hir.read %[[arg_lhs]] : <!b10i>
// CHECK:           %[[val_binop_or:.*]] = p4hir.binop(or, %[[val_lhs]], %[[val_rhs]]) : !b10i
// CHECK:           p4hir.assign %[[val_binop_or]], %[[arg_lhs]] : <!b10i>
// CHECK:           p4hir.return

action bit_or_assign_const(inout bit<10> lhs) {
    lhs |= 3;
}

// CHECK-LABEL:   p4hir.func action @bit_or_assign_serenum_field
// CHECK-SAME:        %[[arg_lhs:.*]]: !p4hir.ref<!b10i> {{.*}}
// CHECK:           %[[enum_field_serenum_first:.*]] = p4hir.const #Serenum_first
// CHECK:           %[[val_lhs:.*]] = p4hir.read %[[arg_lhs]] : <!b10i>
// CHECK:           %[[val_rhs:.*]] = p4hir.cast(%[[enum_field_serenum_first]] : !Serenum) : !b10i
// CHECK:           %[[val_binop_or:.*]] = p4hir.binop(or, %[[val_lhs]], %[[val_rhs]]) : !b10i
// CHECK:           p4hir.assign %[[val_binop_or]], %[[arg_lhs]] : <!b10i>
// CHECK:           p4hir.return

action bit_or_assign_serenum_field(inout bit<10> lhs) {
    lhs |= Serenum.first;
}

// CHECK-LABEL:   p4hir.func action @bit_xor_assign_bit
// CHECK-SAME:        %[[arg_lhs:.*]]: !p4hir.ref<!b10i> {{.*}}, %[[arg_rhs:.*]]: !b10i {{.*}}
// CHECK:           %[[val_lhs:.*]] = p4hir.read %[[arg_lhs]] : <!b10i>
// CHECK:           %[[val_binop_xor:.*]] = p4hir.binop(xor, %[[val_lhs]], %[[arg_rhs]]) : !b10i
// CHECK:           p4hir.assign %[[val_binop_xor]], %[[arg_lhs]] : <!b10i>
// CHECK:           p4hir.return

action bit_xor_assign_bit(inout bit<10> lhs, in bit<10> rhs) {
    lhs ^= rhs;
}

// CHECK-LABEL:   p4hir.func action @bit_xor_assign_const
// CHECK-SAME:        %[[arg_lhs:.*]]: !p4hir.ref<!b10i> {{.*}}
// CHECK:           %[[const_int3_b10i:.*]] = p4hir.const #int3_b10i
// CHECK:           %[[val_rhs:.*]] = p4hir.cast(%[[const_int3_b10i]] : !b10i) : !b10i
// CHECK:           %[[val_lhs:.*]] = p4hir.read %[[arg_lhs]] : <!b10i>
// CHECK:           %[[val_binop_xor:.*]] = p4hir.binop(xor, %[[val_lhs]], %[[val_rhs]]) : !b10i
// CHECK:           p4hir.assign %[[val_binop_xor]], %[[arg_lhs]] : <!b10i>
// CHECK:           p4hir.return

action bit_xor_assign_const(inout bit<10> lhs) {
    lhs ^= 3;
}

// CHECK-LABEL:   p4hir.func action @bit_xor_assign_serenum_field
// CHECK-SAME:        %[[arg_lhs:.*]]: !p4hir.ref<!b10i> {{.*}}
// CHECK:           %[[enum_field_serenum_first:.*]] = p4hir.const #Serenum_first
// CHECK:           %[[val_lhs:.*]] = p4hir.read %[[arg_lhs]] : <!b10i>
// CHECK:           %[[val_rhs:.*]] = p4hir.cast(%[[enum_field_serenum_first]] : !Serenum) : !b10i
// CHECK:           %[[val_binop_xor:.*]] = p4hir.binop(xor, %[[val_lhs]], %[[val_rhs]]) : !b10i
// CHECK:           p4hir.assign %[[val_binop_xor]], %[[arg_lhs]] : <!b10i>
// CHECK:           p4hir.return

action bit_xor_assign_serenum_field(inout bit<10> lhs) {
    lhs ^= Serenum.first;
}
