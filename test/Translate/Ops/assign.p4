// RUN: p4mlir-translate --typeinference-only %s | FileCheck %s

// NOTE: Assertions have been autogenerated by utils/generate-test-checks.py

action assign() {
    bit<10> res;

    bit<10> lhs = 1;
    bit<10> rhs = 2;

    res = lhs;
    res = lhs + rhs;
}

// CHECK-LABEL:   module
// CHECK-NEXT:    %[[VAL_0:.*]] = p4hir.alloca !p4hir.bit<10> ["res"] : !p4hir.ref<!p4hir.bit<10>>
// CHECK:         %[[VAL_1:.*]] = p4hir.const #p4hir.int<1> : !p4hir.bit<10>
// CHECK:         %[[VAL_2:.*]] = p4hir.cast(%[[VAL_1]] : !p4hir.bit<10>) : !p4hir.bit<10>
// CHECK:         %[[VAL_3:.*]] = p4hir.alloca !p4hir.bit<10> ["lhs", init] : !p4hir.ref<!p4hir.bit<10>>
// CHECK:         p4hir.store %[[VAL_2]], %[[VAL_3]] : !p4hir.bit<10>, !p4hir.ref<!p4hir.bit<10>>
// CHECK:         %[[VAL_4:.*]] = p4hir.const #p4hir.int<2> : !p4hir.bit<10>
// CHECK:         %[[VAL_5:.*]] = p4hir.cast(%[[VAL_4]] : !p4hir.bit<10>) : !p4hir.bit<10>
// CHECK:         %[[VAL_6:.*]] = p4hir.alloca !p4hir.bit<10> ["rhs", init] : !p4hir.ref<!p4hir.bit<10>>
// CHECK:         p4hir.store %[[VAL_5]], %[[VAL_6]] : !p4hir.bit<10>, !p4hir.ref<!p4hir.bit<10>>
// CHECK:         %[[VAL_7:.*]] = p4hir.load %[[VAL_3]] : !p4hir.ref<!p4hir.bit<10>>, !p4hir.bit<10>
// CHECK:         p4hir.store %[[VAL_7]], %[[VAL_0]] : !p4hir.bit<10>, !p4hir.ref<!p4hir.bit<10>>
// CHECK:         %[[VAL_8:.*]] = p4hir.load %[[VAL_3]] : !p4hir.ref<!p4hir.bit<10>>, !p4hir.bit<10>
// CHECK:         %[[VAL_9:.*]] = p4hir.load %[[VAL_6]] : !p4hir.ref<!p4hir.bit<10>>, !p4hir.bit<10>
// CHECK:         %[[VAL_10:.*]] = p4hir.binop(add, %[[VAL_8]], %[[VAL_9]]) : !p4hir.bit<10>
// CHECK:         p4hir.store %[[VAL_10]], %[[VAL_0]] : !p4hir.bit<10>, !p4hir.ref<!p4hir.bit<10>>
