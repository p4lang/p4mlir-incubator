// RUN: p4mlir-translate --typeinference-only %s | FileCheck %s

// NOTE: Assertions have been autogenerated by utils/generate-test-checks.py

// CHECK: #[[$ATTR_0:.+]] = #p4hir.int<1> : !b10i
// CHECK: #[[$ATTR_1:.+]] = #p4hir.int<1> : !infint
// CHECK: #[[$ATTR_2:.+]] = #p4hir.int<2> : !b10i

// CHECK-LABEL:   p4hir.func action @assign
action assign() {
    // CHECK:         %[[VAL_0:.*]] = p4hir.variable ["res"] : <!b10i>
    // CHECK:         %[[VAL_1:.*]] = p4hir.const #int1_b10i
    // CHECK:         %[[VAL_2:.*]] = p4hir.cast(%[[VAL_1]] : !b10i) : !b10i
    // CHECK:         %[[VAL_3:.*]] = p4hir.variable ["lhs", init] : <!b10i>
    // CHECK:         p4hir.assign %[[VAL_2]], %[[VAL_3]] : <!b10i>
    // CHECK:         %[[VAL_4:.*]] = p4hir.const #int2_b10i
    // CHECK:         %[[VAL_5:.*]] = p4hir.cast(%[[VAL_4]] : !b10i) : !b10i
    // CHECK:         %[[VAL_6:.*]] = p4hir.variable ["rhs", init] : <!b10i>
    // CHECK:         p4hir.assign %[[VAL_5]], %[[VAL_6]] : <!b10i>
    bit<10> res;

    bit<10> lhs = 1;
    bit<10> rhs = 2;

    // CHECK:         %[[VAL_7:.*]] = p4hir.read %[[VAL_3]] : <!b10i>
    // CHECK:         p4hir.assign %[[VAL_7]], %[[VAL_0]] : <!b10i>
    res = lhs;

    // CHECK:         %[[VAL_8:.*]] = p4hir.read %[[VAL_3]] : <!b10i>
    // CHECK:         %[[VAL_9:.*]] = p4hir.read %[[VAL_6]] : <!b10i>
    // CHECK:         %[[VAL_10:.*]] = p4hir.binop(add, %[[VAL_8]], %[[VAL_9]]) : !b10i
    // CHECK:         p4hir.assign %[[VAL_10]], %[[VAL_0]] : <!b10i>
    res = lhs + rhs;
}

// CHECK-LABEL:   p4hir.func action @op_assign_ref
action op_assign_ref() {
    // CHECK:           %[[VAL_0:.*]] = p4hir.const #[[$ATTR_0]]
    // CHECK:           %[[VAL_1:.*]] = p4hir.cast(%[[VAL_0]] : !b10i) : !b10i
    // CHECK:           %[[VAL_2:.*]] = p4hir.variable ["lhs", init] : <!b10i>
    // CHECK:           p4hir.assign %[[VAL_1]], %[[VAL_2]] : <!b10i>
    // CHECK:           %[[VAL_3:.*]] = p4hir.const #[[$ATTR_2]]
    // CHECK:           %[[VAL_4:.*]] = p4hir.cast(%[[VAL_3]] : !b10i) : !b10i
    // CHECK:           %[[VAL_5:.*]] = p4hir.variable ["rhs", init] : <!b10i>
    // CHECK:           p4hir.assign %[[VAL_4]], %[[VAL_5]] : <!b10i>
    // CHECK:           %[[VAL_6:.*]] = p4hir.variable ["res"] : <!b10i>
    bit<10> lhs = 1;
    bit<10> rhs = 2;
    bit<10> res;

    // CHECK:           %[[VAL_7:.*]] = p4hir.read %[[VAL_2]] : <!b10i>
    // CHECK:           %[[VAL_8:.*]] = p4hir.read %[[VAL_5]] : <!b10i>
    // CHECK:           %[[VAL_9:.*]] = p4hir.binop(mul, %[[VAL_7]], %[[VAL_8]]) : !b10i
    // CHECK:           p4hir.assign %[[VAL_9]], %[[VAL_2]] : <!b10i>
    lhs *= rhs;

    // CHECK:           %[[VAL_10:.*]] = p4hir.read %[[VAL_2]] : <!b10i>
    // CHECK:           %[[VAL_11:.*]] = p4hir.read %[[VAL_5]] : <!b10i>
    // CHECK:           %[[VAL_12:.*]] = p4hir.binop(div, %[[VAL_10]], %[[VAL_11]]) : !b10i
    // CHECK:           p4hir.assign %[[VAL_12]], %[[VAL_2]] : <!b10i>
    lhs /= rhs;

    // CHECK:           %[[VAL_13:.*]] = p4hir.read %[[VAL_2]] : <!b10i>
    // CHECK:           %[[VAL_14:.*]] = p4hir.read %[[VAL_5]] : <!b10i>
    // CHECK:           %[[VAL_15:.*]] = p4hir.binop(mod, %[[VAL_13]], %[[VAL_14]]) : !b10i
    // CHECK:           p4hir.assign %[[VAL_15]], %[[VAL_2]] : <!b10i>
    lhs %= rhs;

    // CHECK:           %[[VAL_16:.*]] = p4hir.read %[[VAL_2]] : <!b10i>
    // CHECK:           %[[VAL_17:.*]] = p4hir.read %[[VAL_5]] : <!b10i>
    // CHECK:           %[[VAL_18:.*]] = p4hir.binop(add, %[[VAL_16]], %[[VAL_17]]) : !b10i
    // CHECK:           p4hir.assign %[[VAL_18]], %[[VAL_2]] : <!b10i>
    lhs += rhs;

    // CHECK:           %[[VAL_19:.*]] = p4hir.read %[[VAL_2]] : <!b10i>
    // CHECK:           %[[VAL_20:.*]] = p4hir.read %[[VAL_5]] : <!b10i>
    // CHECK:           %[[VAL_21:.*]] = p4hir.binop(sub, %[[VAL_19]], %[[VAL_20]]) : !b10i
    // CHECK:           p4hir.assign %[[VAL_21]], %[[VAL_2]] : <!b10i>
    lhs -= rhs;

    // CHECK:           %[[VAL_22:.*]] = p4hir.read %[[VAL_2]] : <!b10i>
    // CHECK:           %[[VAL_23:.*]] = p4hir.read %[[VAL_5]] : <!b10i>
    // CHECK:           %[[VAL_24:.*]] = p4hir.binop(sadd, %[[VAL_22]], %[[VAL_23]]) : !b10i
    // CHECK:           p4hir.assign %[[VAL_24]], %[[VAL_2]] : <!b10i>
    lhs |+|= rhs;

    // CHECK:           %[[VAL_25:.*]] = p4hir.read %[[VAL_2]] : <!b10i>
    // CHECK:           %[[VAL_26:.*]] = p4hir.read %[[VAL_5]] : <!b10i>
    // CHECK:           %[[VAL_27:.*]] = p4hir.binop(ssub, %[[VAL_25]], %[[VAL_26]]) : !b10i
    // CHECK:           p4hir.assign %[[VAL_27]], %[[VAL_2]] : <!b10i>
    lhs |-|= rhs;

    // CHECK:           %[[VAL_28:.*]] = p4hir.read %[[VAL_2]] : <!b10i>
    // CHECK:           %[[VAL_29:.*]] = p4hir.read %[[VAL_5]] : <!b10i>
    // CHECK:           %[[VAL_30:.*]] = p4hir.shl(%[[VAL_28]], %[[VAL_29]] : !b10i) : !b10i
    // CHECK:           p4hir.assign %[[VAL_30]], %[[VAL_2]] : <!b10i>
    lhs <<= rhs;

    // CHECK:           %[[VAL_31:.*]] = p4hir.read %[[VAL_2]] : <!b10i>
    // CHECK:           %[[VAL_32:.*]] = p4hir.read %[[VAL_5]] : <!b10i>
    // CHECK:           %[[VAL_33:.*]] = p4hir.shr(%[[VAL_31]], %[[VAL_32]] : !b10i) : !b10i
    // CHECK:           p4hir.assign %[[VAL_33]], %[[VAL_2]] : <!b10i>
    lhs >>= rhs;

    // CHECK:           %[[VAL_34:.*]] = p4hir.read %[[VAL_2]] : <!b10i>
    // CHECK:           %[[VAL_35:.*]] = p4hir.read %[[VAL_5]] : <!b10i>
    // CHECK:           %[[VAL_36:.*]] = p4hir.binop(and, %[[VAL_34]], %[[VAL_35]]) : !b10i
    // CHECK:           p4hir.assign %[[VAL_36]], %[[VAL_2]] : <!b10i>
    lhs &= rhs;

    // CHECK:           %[[VAL_37:.*]] = p4hir.read %[[VAL_2]] : <!b10i>
    // CHECK:           %[[VAL_38:.*]] = p4hir.read %[[VAL_5]] : <!b10i>
    // CHECK:           %[[VAL_39:.*]] = p4hir.binop(or, %[[VAL_37]], %[[VAL_38]]) : !b10i
    // CHECK:           p4hir.assign %[[VAL_39]], %[[VAL_2]] : <!b10i>
    lhs |= rhs;

    // CHECK:           %[[VAL_40:.*]] = p4hir.read %[[VAL_2]] : <!b10i>
    // CHECK:           %[[VAL_41:.*]] = p4hir.read %[[VAL_5]] : <!b10i>
    // CHECK:           %[[VAL_42:.*]] = p4hir.binop(xor, %[[VAL_40]], %[[VAL_41]]) : !b10i
    // CHECK:           p4hir.assign %[[VAL_42]], %[[VAL_2]] : <!b10i>
    lhs ^= rhs;

    // CHECK:           %[[VAL_43:.*]] = p4hir.read %[[VAL_2]] : <!b10i>
    // CHECK:           p4hir.assign %[[VAL_43]], %[[VAL_6]] : <!b10i>
    res = lhs;

    // CHECK:           p4hir.implicit_return
}

// CHECK-LABEL:   p4hir.func action @op_assign_const
action op_assign_const() {
    // CHECK:           %[[VAL_0:.*]] = p4hir.const #[[$ATTR_0]]
    // CHECK:           %[[VAL_1:.*]] = p4hir.cast(%[[VAL_0]] : !b10i) : !b10i
    // CHECK:           %[[VAL_2:.*]] = p4hir.variable ["lhs", init] : <!b10i>
    // CHECK:           p4hir.assign %[[VAL_1]], %[[VAL_2]] : <!b10i>
    // CHECK:           %[[VAL_3:.*]] = p4hir.variable ["res"] : <!b10i>
    bit<10> lhs = 1;
    bit<10> res;

    // CHECK:           %[[VAL_4:.*]] = p4hir.const #[[$ATTR_0]]
    // CHECK:           %[[VAL_5:.*]] = p4hir.cast(%[[VAL_4]] : !b10i) : !b10i
    // CHECK:           %[[VAL_6:.*]] = p4hir.read %[[VAL_2]] : <!b10i>
    // CHECK:           %[[VAL_7:.*]] = p4hir.binop(mul, %[[VAL_6]], %[[VAL_5]]) : !b10i
    // CHECK:           p4hir.assign %[[VAL_7]], %[[VAL_2]] : <!b10i>
    lhs *= 1;

    // CHECK:           %[[VAL_8:.*]] = p4hir.const #[[$ATTR_0]]
    // CHECK:           %[[VAL_9:.*]] = p4hir.cast(%[[VAL_8]] : !b10i) : !b10i
    // CHECK:           %[[VAL_10:.*]] = p4hir.read %[[VAL_2]] : <!b10i>
    // CHECK:           %[[VAL_11:.*]] = p4hir.binop(div, %[[VAL_10]], %[[VAL_9]]) : !b10i
    // CHECK:           p4hir.assign %[[VAL_11]], %[[VAL_2]] : <!b10i>
    lhs /= 1;

    // CHECK:           %[[VAL_12:.*]] = p4hir.const #[[$ATTR_0]]
    // CHECK:           %[[VAL_13:.*]] = p4hir.cast(%[[VAL_12]] : !b10i) : !b10i
    // CHECK:           %[[VAL_14:.*]] = p4hir.read %[[VAL_2]] : <!b10i>
    // CHECK:           %[[VAL_15:.*]] = p4hir.binop(mod, %[[VAL_14]], %[[VAL_13]]) : !b10i
    // CHECK:           p4hir.assign %[[VAL_15]], %[[VAL_2]] : <!b10i>
    lhs %= 1;

    // CHECK:           %[[VAL_16:.*]] = p4hir.const #[[$ATTR_0]]
    // CHECK:           %[[VAL_17:.*]] = p4hir.cast(%[[VAL_16]] : !b10i) : !b10i
    // CHECK:           %[[VAL_18:.*]] = p4hir.read %[[VAL_2]] : <!b10i>
    // CHECK:           %[[VAL_19:.*]] = p4hir.binop(add, %[[VAL_18]], %[[VAL_17]]) : !b10i
    // CHECK:           p4hir.assign %[[VAL_19]], %[[VAL_2]] : <!b10i>
    lhs += 1;

    // CHECK:           %[[VAL_20:.*]] = p4hir.const #[[$ATTR_0]]
    // CHECK:           %[[VAL_21:.*]] = p4hir.cast(%[[VAL_20]] : !b10i) : !b10i
    // CHECK:           %[[VAL_22:.*]] = p4hir.read %[[VAL_2]] : <!b10i>
    // CHECK:           %[[VAL_23:.*]] = p4hir.binop(sub, %[[VAL_22]], %[[VAL_21]]) : !b10i
    // CHECK:           p4hir.assign %[[VAL_23]], %[[VAL_2]] : <!b10i>
    lhs -= 1;

    // CHECK:           %[[VAL_24:.*]] = p4hir.const #[[$ATTR_0]]
    // CHECK:           %[[VAL_25:.*]] = p4hir.cast(%[[VAL_24]] : !b10i) : !b10i
    // CHECK:           %[[VAL_26:.*]] = p4hir.read %[[VAL_2]] : <!b10i>
    // CHECK:           %[[VAL_27:.*]] = p4hir.binop(sadd, %[[VAL_26]], %[[VAL_25]]) : !b10i
    // CHECK:           p4hir.assign %[[VAL_27]], %[[VAL_2]] : <!b10i>
    lhs |+|= 1;

    // CHECK:           %[[VAL_28:.*]] = p4hir.const #[[$ATTR_0]]
    // CHECK:           %[[VAL_29:.*]] = p4hir.cast(%[[VAL_28]] : !b10i) : !b10i
    // CHECK:           %[[VAL_30:.*]] = p4hir.read %[[VAL_2]] : <!b10i>
    // CHECK:           %[[VAL_31:.*]] = p4hir.binop(ssub, %[[VAL_30]], %[[VAL_29]]) : !b10i
    // CHECK:           p4hir.assign %[[VAL_31]], %[[VAL_2]] : <!b10i>
    lhs |-|= 1;

    // CHECK:           %[[VAL_32:.*]] = p4hir.const #[[$ATTR_1]]
    // CHECK:           %[[VAL_33:.*]] = p4hir.read %[[VAL_2]] : <!b10i>
    // CHECK:           %[[VAL_34:.*]] = p4hir.shl(%[[VAL_33]], %[[VAL_32]] : !infint) : !b10i
    // CHECK:           p4hir.assign %[[VAL_34]], %[[VAL_2]] : <!b10i>
    lhs <<= 1;

    // CHECK:           %[[VAL_35:.*]] = p4hir.const #[[$ATTR_1]]
    // CHECK:           %[[VAL_36:.*]] = p4hir.read %[[VAL_2]] : <!b10i>
    // CHECK:           %[[VAL_37:.*]] = p4hir.shr(%[[VAL_36]], %[[VAL_35]] : !infint) : !b10i
    // CHECK:           p4hir.assign %[[VAL_37]], %[[VAL_2]] : <!b10i>
    lhs >>= 1;

    // CHECK:           %[[VAL_38:.*]] = p4hir.const #[[$ATTR_0]]
    // CHECK:           %[[VAL_39:.*]] = p4hir.cast(%[[VAL_38]] : !b10i) : !b10i
    // CHECK:           %[[VAL_40:.*]] = p4hir.read %[[VAL_2]] : <!b10i>
    // CHECK:           %[[VAL_41:.*]] = p4hir.binop(and, %[[VAL_40]], %[[VAL_39]]) : !b10i
    // CHECK:           p4hir.assign %[[VAL_41]], %[[VAL_2]] : <!b10i>
    lhs &= 1;

    // CHECK:           %[[VAL_42:.*]] = p4hir.const #[[$ATTR_0]]
    // CHECK:           %[[VAL_43:.*]] = p4hir.cast(%[[VAL_42]] : !b10i) : !b10i
    // CHECK:           %[[VAL_44:.*]] = p4hir.read %[[VAL_2]] : <!b10i>
    // CHECK:           %[[VAL_45:.*]] = p4hir.binop(or, %[[VAL_44]], %[[VAL_43]]) : !b10i
    // CHECK:           p4hir.assign %[[VAL_45]], %[[VAL_2]] : <!b10i>
    lhs |= 1;

    // CHECK:           %[[VAL_46:.*]] = p4hir.const #[[$ATTR_0]]
    // CHECK:           %[[VAL_47:.*]] = p4hir.cast(%[[VAL_46]] : !b10i) : !b10i
    // CHECK:           %[[VAL_48:.*]] = p4hir.read %[[VAL_2]] : <!b10i>
    // CHECK:           %[[VAL_49:.*]] = p4hir.binop(xor, %[[VAL_48]], %[[VAL_47]]) : !b10i
    // CHECK:           p4hir.assign %[[VAL_49]], %[[VAL_2]] : <!b10i>
    lhs ^= 1;

    // CHECK:           %[[VAL_50:.*]] = p4hir.read %[[VAL_2]] : <!b10i>
    // CHECK:           p4hir.assign %[[VAL_50]], %[[VAL_3]] : <!b10i>
    res = lhs;

    // CHECK:           p4hir.implicit_return
}
