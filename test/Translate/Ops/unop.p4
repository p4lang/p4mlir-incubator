// RUN: p4mlir-translate --typeinference-only %s | FileCheck %s
// RUN: p4mlir-translate --typeinference-only --no-dump --Wdisable --dump-exported-p4 %s | diff -u - %s.ref
// RUN: p4mlir-translate --typeinference-only --no-dump --Wdisable --dump-exported-p4 %s | p4test -

// NOTE: Assertions have been autogenerated by utils/generate-test-checks.py

// CHECK: #[[const_false:.+]] = #p4hir.bool<false> : !p4hir.bool
// CHECK: #[[const_int_neg1_i8i:.+]] = #p4hir.int<-1> : !i8i
// CHECK: #[[const_int1_i8i:.+]] = #p4hir.int<1> : !i8i

// CHECK-LABEL:   p4hir.func action @plus_bit
// CHECK-SAME:        %[[arg_a:.*]]: !b8i {{.*}}, %[[arg_res:.*]]: !p4hir.ref<!b8i> {{.*}}
// CHECK:           %[[val_unary_plus:.*]] = p4hir.unary(plus, %[[arg_a]]) : !b8i
// CHECK:           p4hir.assign %[[val_unary_plus]], %[[arg_res]] : <!b8i>
// CHECK:           p4hir.return

action plus_bit(in bit<8> a, out bit<8> res) {
  res = +a;
}

// CHECK-LABEL:   p4hir.func action @plus_int
// CHECK-SAME:        %[[arg_a:.*]]: !i8i {{.*}}, %[[arg_res:.*]]: !p4hir.ref<!i8i> {{.*}}
// CHECK:           %[[val_unary_plus:.*]] = p4hir.unary(plus, %[[arg_a]]) : !i8i
// CHECK:           p4hir.assign %[[val_unary_plus]], %[[arg_res]] : <!i8i>
// CHECK:           p4hir.return

action plus_int(in int<8> a, out int<8> res) {
  res = +a;
}

// CHECK-LABEL:   p4hir.func action @plus_const
// CHECK-SAME:        %[[arg_res:.*]]: !p4hir.ref<!i8i> {{.*}}
// CHECK:           %[[const_int1_i8i:.*]] = p4hir.const #int1_i8i
// CHECK:           %[[val_cast:.*]] = p4hir.cast(%[[const_int1_i8i]] : !i8i) : !i8i
// CHECK:           p4hir.assign %[[val_cast]], %[[arg_res]] : <!i8i>
// CHECK:           p4hir.return

action plus_const(out int<8> res) {
  res = +1;
}

// CHECK-LABEL:   p4hir.func action @minus_bit
// CHECK-SAME:        %[[arg_a:.*]]: !b8i {{.*}}, %[[arg_res:.*]]: !p4hir.ref<!b8i> {{.*}}
// CHECK:           %[[val_unary_minus:.*]] = p4hir.unary(minus, %[[arg_a]]) : !b8i
// CHECK:           p4hir.assign %[[val_unary_minus]], %[[arg_res]] : <!b8i>
// CHECK:           p4hir.return

action minus_bit(in bit<8> a, out bit<8> res) {
  res = -a;
}

// CHECK-LABEL:   p4hir.func action @minus_int
// CHECK-SAME:        %[[arg_a:.*]]: !i8i {{.*}}, %[[arg_res:.*]]: !p4hir.ref<!i8i> {{.*}}
// CHECK:           %[[val_unary_minus:.*]] = p4hir.unary(minus, %[[arg_a]]) : !i8i
// CHECK:           p4hir.assign %[[val_unary_minus]], %[[arg_res]] : <!i8i>
// CHECK:           p4hir.return

action minus_int(in int<8> a, out int<8> res) {
  res = -a;
}

// CHECK-LABEL:   p4hir.func action @minus_const
// CHECK-SAME:        %[[arg_res:.*]]: !p4hir.ref<!i8i> {{.*}}
// CHECK:           %[[const_int_neg1_i8i:.*]] = p4hir.const #int-1_i8i
// CHECK:           %[[val_cast:.*]] = p4hir.cast(%[[const_int_neg1_i8i]] : !i8i) : !i8i
// CHECK:           p4hir.assign %[[val_cast]], %[[arg_res]] : <!i8i>
// CHECK:           p4hir.return

action minus_const(out int<8> res) {
  res = -1;
}

// CHECK-LABEL:   p4hir.func action @cmpl_bit
// CHECK-SAME:        %[[arg_a:.*]]: !b8i {{.*}}, %[[arg_res:.*]]: !p4hir.ref<!b8i> {{.*}}
// CHECK:           %[[val_unary_cmpl:.*]] = p4hir.unary(cmpl, %[[arg_a]]) : !b8i
// CHECK:           p4hir.assign %[[val_unary_cmpl]], %[[arg_res]] : <!b8i>
// CHECK:           p4hir.return

action cmpl_bit(in bit<8> a, out bit<8> res) {
  res = ~a;
}

// CHECK-LABEL:   p4hir.func action @cmpl_int
// CHECK-SAME:        %[[arg_a:.*]]: !i8i {{.*}}, %[[arg_res:.*]]: !p4hir.ref<!i8i> {{.*}}
// CHECK:           %[[val_unary_cmpl:.*]] = p4hir.unary(cmpl, %[[arg_a]]) : !i8i
// CHECK:           p4hir.assign %[[val_unary_cmpl]], %[[arg_res]] : <!i8i>
// CHECK:           p4hir.return

action cmpl_int(in int<8> a, out int<8> res) {
  res = ~a;
}

// CHECK-LABEL:   p4hir.func action @not_bool
// CHECK-SAME:        %[[arg_a:.*]]: !p4hir.bool {{.*}}, %[[arg_res:.*]]: !p4hir.ref<!p4hir.bool> {{.*}}
// CHECK:           %[[val_unary_not:.*]] = p4hir.unary(not, %[[arg_a]]) : !p4hir.bool
// CHECK:           p4hir.assign %[[val_unary_not]], %[[arg_res]] : <!p4hir.bool>
// CHECK:           p4hir.return

action not_bool(in bool a, out bool res) {
  res = !a;
}

// CHECK-LABEL:   p4hir.func action @not_const
// CHECK-SAME:        %[[arg_res:.*]]: !p4hir.ref<!p4hir.bool> {{.*}}
// CHECK:           %[[const_false:.*]] = p4hir.const #false
// CHECK:           p4hir.assign %[[const_false]], %[[arg_res]] : <!p4hir.bool>
// CHECK:           p4hir.return

action not_const(out bool res) {
  res = !true;
}
