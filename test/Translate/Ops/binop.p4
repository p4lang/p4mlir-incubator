// RUN: p4mlir-translate --typeinference-only %s | FileCheck %s
// RUN: p4mlir-translate --typeinference-only --no-dump --Wdisable --dump-exported-p4 %s | diff -u - %s.ref
// RUN: p4mlir-translate --typeinference-only --no-dump --Wdisable --dump-exported-p4 %s | p4test -

// NOTE: Assertions have been autogenerated by utils/generate-test-checks.py

// CHECK: #[[const_int2_b10i:.+]] = #p4hir.int<2> : !b10i
// CHECK: #[[const_int2_i10i:.+]] = #p4hir.int<2> : !i10i
// CHECK: #[[const_int3_b10i:.+]] = #p4hir.int<3> : !b10i

// CHECK-LABEL:   p4hir.func action @bit_add_bit
// CHECK-SAME:        %[[arg_lhs:.*]]: !b10i {{.*}}, %[[arg_rhs:.*]]: !b10i {{.*}}, %[[arg_res:.*]]: !p4hir.ref<!b10i> {{.*}}
// CHECK:           %[[val_binop_add:.*]] = p4hir.binop(add, %[[arg_lhs]], %[[arg_rhs]]) : !b10i
// CHECK:           p4hir.assign %[[val_binop_add]], %[[arg_res]] : <!b10i>
// CHECK:           p4hir.return

action bit_add_bit(in bit<10> lhs, in bit<10> rhs, out bit<10> res) {
    res = lhs + rhs;
}

// CHECK-LABEL:   p4hir.func action @int_add_int
// CHECK-SAME:        %[[arg_lhs:.*]]: !i10i {{.*}}, %[[arg_rhs:.*]]: !i10i {{.*}}, %[[arg_res:.*]]: !p4hir.ref<!i10i> {{.*}}
// CHECK:           %[[val_binop_add:.*]] = p4hir.binop(add, %[[arg_lhs]], %[[arg_rhs]]) : !i10i
// CHECK:           p4hir.assign %[[val_binop_add]], %[[arg_res]] : <!i10i>
// CHECK:           p4hir.return

action int_add_int(in int<10> lhs, in int<10> rhs, out int<10> res) {
    res = lhs + rhs;
}

// CHECK-LABEL:   p4hir.func action @bit_sub_bit
// CHECK-SAME:        %[[arg_lhs:.*]]: !b10i {{.*}}, %[[arg_rhs:.*]]: !b10i {{.*}}, %[[arg_res:.*]]: !p4hir.ref<!b10i> {{.*}}
// CHECK:           %[[val_binop_sub:.*]] = p4hir.binop(sub, %[[arg_lhs]], %[[arg_rhs]]) : !b10i
// CHECK:           p4hir.assign %[[val_binop_sub]], %[[arg_res]] : <!b10i>
// CHECK:           p4hir.return

action bit_sub_bit(in bit<10> lhs, in bit<10> rhs, out bit<10> res) {
    res = lhs - rhs;
}

// CHECK-LABEL:   p4hir.func action @int_sub_int
// CHECK-SAME:        %[[arg_lhs:.*]]: !i10i {{.*}}, %[[arg_rhs:.*]]: !i10i {{.*}}, %[[arg_res:.*]]: !p4hir.ref<!i10i> {{.*}}
// CHECK:           %[[val_binop_sub:.*]] = p4hir.binop(sub, %[[arg_lhs]], %[[arg_rhs]]) : !i10i
// CHECK:           p4hir.assign %[[val_binop_sub]], %[[arg_res]] : <!i10i>
// CHECK:           p4hir.return

action int_sub_int(in int<10> lhs, in int<10> rhs, out int<10> res) {
    res = lhs - rhs;
}

// CHECK-LABEL:   p4hir.func action @bit_mul_bit
// CHECK-SAME:        %[[arg_lhs:.*]]: !b10i {{.*}}, %[[arg_rhs:.*]]: !b10i {{.*}}, %[[arg_res:.*]]: !p4hir.ref<!b10i> {{.*}}
// CHECK:           %[[val_binop_mul:.*]] = p4hir.binop(mul, %[[arg_lhs]], %[[arg_rhs]]) : !b10i
// CHECK:           p4hir.assign %[[val_binop_mul]], %[[arg_res]] : <!b10i>
// CHECK:           p4hir.return

action bit_mul_bit(in bit<10> lhs, in bit<10> rhs, out bit<10> res) {
    res = lhs * rhs;
}

// CHECK-LABEL:   p4hir.func action @int_mul_int
// CHECK-SAME:        %[[arg_lhs:.*]]: !i10i {{.*}}, %[[arg_rhs:.*]]: !i10i {{.*}}, %[[arg_res:.*]]: !p4hir.ref<!i10i> {{.*}}
// CHECK:           %[[val_binop_mul:.*]] = p4hir.binop(mul, %[[arg_lhs]], %[[arg_rhs]]) : !i10i
// CHECK:           p4hir.assign %[[val_binop_mul]], %[[arg_res]] : <!i10i>
// CHECK:           p4hir.return

action int_mul_int(in int<10> lhs, in int<10> rhs, out int<10> res) {
    res = lhs * rhs;
}

// CHECK-LABEL:   p4hir.func action @bit_mul_const
// CHECK-SAME:        %[[arg_lhs:.*]]: !b10i {{.*}}, %[[arg_res:.*]]: !p4hir.ref<!b10i> {{.*}}
// CHECK:           %[[const_int2_b10i:.*]] = p4hir.const #int2_b10i
// CHECK:           %[[val_binop_mul:.*]] = p4hir.binop(mul, %[[arg_lhs]], %[[const_int2_b10i]]) : !b10i
// CHECK:           p4hir.assign %[[val_binop_mul]], %[[arg_res]] : <!b10i>
// CHECK:           p4hir.return

action bit_mul_const(in bit<10> lhs, out bit<10> res) {
    res = lhs * 2;
}

// CHECK-LABEL:   p4hir.func action @const_mul_bit
// CHECK-SAME:        %[[arg_rhs:.*]]: !b10i {{.*}}, %[[arg_res:.*]]: !p4hir.ref<!b10i> {{.*}}
// CHECK:           %[[const_int2_b10i:.*]] = p4hir.const #int2_b10i
// CHECK:           %[[val_binop_mul:.*]] = p4hir.binop(mul, %[[const_int2_b10i]], %[[arg_rhs]]) : !b10i
// CHECK:           p4hir.assign %[[val_binop_mul]], %[[arg_res]] : <!b10i>
// CHECK:           p4hir.return

action const_mul_bit(in bit<10> rhs, out bit<10> res) {
    res = 2 * rhs;
}

// CHECK-LABEL:   p4hir.func action @int_mul_const
// CHECK-SAME:        %[[arg_lhs:.*]]: !i10i {{.*}}, %[[arg_res:.*]]: !p4hir.ref<!i10i> {{.*}}
// CHECK:           %[[const_int2_i10i:.*]] = p4hir.const #int2_i10i
// CHECK:           %[[val_binop_mul:.*]] = p4hir.binop(mul, %[[arg_lhs]], %[[const_int2_i10i]]) : !i10i
// CHECK:           p4hir.assign %[[val_binop_mul]], %[[arg_res]] : <!i10i>
// CHECK:           p4hir.return

action int_mul_const(in int<10> lhs, out int<10> res) {
    res = lhs * 2;
}

// CHECK-LABEL:   p4hir.func action @const_mul_int
// CHECK-SAME:        %[[arg_rhs:.*]]: !i10i {{.*}}, %[[arg_res:.*]]: !p4hir.ref<!i10i> {{.*}}
// CHECK:           %[[const_int2_i10i:.*]] = p4hir.const #int2_i10i
// CHECK:           %[[val_binop_mul:.*]] = p4hir.binop(mul, %[[const_int2_i10i]], %[[arg_rhs]]) : !i10i
// CHECK:           p4hir.assign %[[val_binop_mul]], %[[arg_res]] : <!i10i>
// CHECK:           p4hir.return

action const_mul_int(in int<10> rhs, out int<10> res) {
    res = 2 * rhs;
}

// CHECK-LABEL:   p4hir.func action @bit_mul_the_same_bit
// CHECK-SAME:        %[[arg_same:.*]]: !b10i {{.*}}, %[[arg_res:.*]]: !p4hir.ref<!b10i> {{.*}}
// CHECK:           %[[val_binop_mul:.*]] = p4hir.binop(mul, %[[arg_same]], %[[arg_same]]) : !b10i
// CHECK:           p4hir.assign %[[val_binop_mul]], %[[arg_res]] : <!b10i>
// CHECK:           p4hir.return

action bit_mul_the_same_bit(in bit<10> same, out bit<10> res) {
    res = same * same;
}

// CHECK-LABEL:   p4hir.func action @int_mul_the_same_int
// CHECK-SAME:        %[[arg_same:.*]]: !i10i {{.*}}, %[[arg_res:.*]]: !p4hir.ref<!i10i> {{.*}}
// CHECK:           %[[val_binop_mul:.*]] = p4hir.binop(mul, %[[arg_same]], %[[arg_same]]) : !i10i
// CHECK:           p4hir.assign %[[val_binop_mul]], %[[arg_res]] : <!i10i>
// CHECK:           p4hir.return

action int_mul_the_same_int(in int<10> same, out int<10> res) {
    res = same * same;
}

// CHECK-LABEL:   p4hir.func action @bit_div_bit
// CHECK-SAME:        %[[arg_lhs:.*]]: !b10i {{.*}}, %[[arg_rhs:.*]]: !b10i {{.*}}, %[[arg_res:.*]]: !p4hir.ref<!b10i> {{.*}}
// CHECK:           %[[val_binop_div:.*]] = p4hir.binop(div, %[[arg_lhs]], %[[arg_rhs]]) : !b10i
// CHECK:           p4hir.assign %[[val_binop_div]], %[[arg_res]] : <!b10i>
// CHECK:           p4hir.return

action bit_div_bit(in bit<10> lhs, in bit<10> rhs, out bit<10> res) {
    res = lhs / rhs;
}

// action int_div_int() - skipped: div operation is not supported on signed values

// CHECK-LABEL:   p4hir.func action @bit_mod_bit
// CHECK-SAME:        %[[arg_lhs:.*]]: !b10i {{.*}}, %[[arg_rhs:.*]]: !b10i {{.*}}, %[[arg_res:.*]]: !p4hir.ref<!b10i> {{.*}}
// CHECK:           %[[val_binop_mod:.*]] = p4hir.binop(mod, %[[arg_lhs]], %[[arg_rhs]]) : !b10i
// CHECK:           p4hir.assign %[[val_binop_mod]], %[[arg_res]] : <!b10i>
// CHECK:           p4hir.return

action bit_mod_bit(in bit<10> lhs, in bit<10> rhs, out bit<10> res) {
    res = lhs % rhs;
}

// action int_mod_int() - skipped: mod operation is not supported on signed values

// CHECK-LABEL:   p4hir.func action @bit_sadd_bit
// CHECK-SAME:        %[[arg_lhs:.*]]: !b10i {{.*}}, %[[arg_rhs:.*]]: !b10i {{.*}}, %[[arg_res:.*]]: !p4hir.ref<!b10i> {{.*}}
// CHECK:           %[[val_binop_sadd:.*]] = p4hir.binop(sadd, %[[arg_lhs]], %[[arg_rhs]]) : !b10i
// CHECK:           p4hir.assign %[[val_binop_sadd]], %[[arg_res]] : <!b10i>
// CHECK:           p4hir.return

action bit_sadd_bit(in bit<10> lhs, in bit<10> rhs, out bit<10> res) {
    res = lhs |+| rhs;
}

// CHECK-LABEL:   p4hir.func action @int_sadd_int
// CHECK-SAME:        %[[arg_lhs:.*]]: !i10i {{.*}}, %[[arg_rhs:.*]]: !i10i {{.*}}, %[[arg_res:.*]]: !p4hir.ref<!i10i> {{.*}}
// CHECK:           %[[val_binop_sadd:.*]] = p4hir.binop(sadd, %[[arg_lhs]], %[[arg_rhs]]) : !i10i
// CHECK:           p4hir.assign %[[val_binop_sadd]], %[[arg_res]] : <!i10i>
// CHECK:           p4hir.return

action int_sadd_int(in int<10> lhs, in int<10> rhs, out int<10> res) {
    res = lhs |+| rhs;
}

// CHECK-LABEL:   p4hir.func action @bit_ssub_bit
// CHECK-SAME:        %[[arg_lhs:.*]]: !b10i {{.*}}, %[[arg_rhs:.*]]: !b10i {{.*}}, %[[arg_res:.*]]: !p4hir.ref<!b10i> {{.*}}
// CHECK:           %[[val_binop_ssub:.*]] = p4hir.binop(ssub, %[[arg_lhs]], %[[arg_rhs]]) : !b10i
// CHECK:           p4hir.assign %[[val_binop_ssub]], %[[arg_res]] : <!b10i>
// CHECK:           p4hir.return

action bit_ssub_bit(in bit<10> lhs, in bit<10> rhs, out bit<10> res) {
    res = lhs |-| rhs;
}

// CHECK-LABEL:   p4hir.func action @int_ssub_int
// CHECK-SAME:        %[[arg_lhs:.*]]: !i10i {{.*}}, %[[arg_rhs:.*]]: !i10i {{.*}}, %[[arg_res:.*]]: !p4hir.ref<!i10i> {{.*}}
// CHECK:           %[[val_binop_ssub:.*]] = p4hir.binop(ssub, %[[arg_lhs]], %[[arg_rhs]]) : !i10i
// CHECK:           p4hir.assign %[[val_binop_ssub]], %[[arg_res]] : <!i10i>
// CHECK:           p4hir.return

action int_ssub_int(in int<10> lhs, in int<10> rhs, out int<10> res) {
    res = lhs |-| rhs;
}

// CHECK-LABEL:   p4hir.func action @bit_or_bit
// CHECK-SAME:        %[[arg_lhs:.*]]: !b10i {{.*}}, %[[arg_rhs:.*]]: !b10i {{.*}}, %[[arg_res:.*]]: !p4hir.ref<!b10i> {{.*}}
// CHECK:           %[[val_binop_or:.*]] = p4hir.binop(or, %[[arg_lhs]], %[[arg_rhs]]) : !b10i
// CHECK:           p4hir.assign %[[val_binop_or]], %[[arg_res]] : <!b10i>
// CHECK:           p4hir.return

action bit_or_bit(in bit<10> lhs, in bit<10> rhs, out bit<10> res) {
    res = lhs | rhs;
}

// CHECK-LABEL:   p4hir.func action @int_or_int
// CHECK-SAME:        %[[arg_lhs:.*]]: !i10i {{.*}}, %[[arg_rhs:.*]]: !i10i {{.*}}, %[[arg_res:.*]]: !p4hir.ref<!i10i> {{.*}}
// CHECK:           %[[val_binop_or:.*]] = p4hir.binop(or, %[[arg_lhs]], %[[arg_rhs]]) : !i10i
// CHECK:           p4hir.assign %[[val_binop_or]], %[[arg_res]] : <!i10i>
// CHECK:           p4hir.return

action int_or_int(in int<10> lhs, in int<10> rhs, out int<10> res) {
    res = lhs | rhs;
}

// CHECK-LABEL:   p4hir.func action @bit_and_bit
// CHECK-SAME:        %[[arg_lhs:.*]]: !b10i {{.*}}, %[[arg_rhs:.*]]: !b10i {{.*}}, %[[arg_res:.*]]: !p4hir.ref<!b10i> {{.*}}
// CHECK:           %[[val_binop_and:.*]] = p4hir.binop(and, %[[arg_lhs]], %[[arg_rhs]]) : !b10i
// CHECK:           p4hir.assign %[[val_binop_and]], %[[arg_res]] : <!b10i>
// CHECK:           p4hir.return

action bit_and_bit(in bit<10> lhs, in bit<10> rhs, out bit<10> res) {
    res = lhs & rhs;
}

// CHECK-LABEL:   p4hir.func action @int_and_int
// CHECK-SAME:        %[[arg_lhs:.*]]: !i10i {{.*}}, %[[arg_rhs:.*]]: !i10i {{.*}}, %[[arg_res:.*]]: !p4hir.ref<!i10i> {{.*}}
// CHECK:           %[[val_binop_and:.*]] = p4hir.binop(and, %[[arg_lhs]], %[[arg_rhs]]) : !i10i
// CHECK:           p4hir.assign %[[val_binop_and]], %[[arg_res]] : <!i10i>
// CHECK:           p4hir.return

action int_and_int(in int<10> lhs, in int<10> rhs, out int<10> res) {
    res = lhs & rhs;
}

// CHECK-LABEL:   p4hir.func action @bit_xor_bit
// CHECK-SAME:        %[[arg_lhs:.*]]: !b10i {{.*}}, %[[arg_rhs:.*]]: !b10i {{.*}}, %[[arg_res:.*]]: !p4hir.ref<!b10i> {{.*}}
// CHECK:           %[[val_binop_xor:.*]] = p4hir.binop(xor, %[[arg_lhs]], %[[arg_rhs]]) : !b10i
// CHECK:           p4hir.assign %[[val_binop_xor]], %[[arg_res]] : <!b10i>
// CHECK:           p4hir.return

action bit_xor_bit(in bit<10> lhs, in bit<10> rhs, out bit<10> res) {
    res = lhs ^ rhs;
}

// CHECK-LABEL:   p4hir.func action @int_xor_int
// CHECK-SAME:        %[[arg_lhs:.*]]: !i10i {{.*}}, %[[arg_rhs:.*]]: !i10i {{.*}}, %[[arg_res:.*]]: !p4hir.ref<!i10i> {{.*}}
// CHECK:           %[[val_binop_xor:.*]] = p4hir.binop(xor, %[[arg_lhs]], %[[arg_rhs]]) : !i10i
// CHECK:           p4hir.assign %[[val_binop_xor]], %[[arg_res]] : <!i10i>
// CHECK:           p4hir.return

action int_xor_int(in int<10> lhs, in int<10> rhs, out int<10> res) {
    res = lhs ^ rhs;
}

// CHECK-LABEL:   p4hir.func action @complex_sequence
// CHECK-SAME:        %[[arg_lhs:.*]]: !b10i {{.*}}, %[[arg_rhs:.*]]: !b10i {{.*}}, %[[arg_res:.*]]: !p4hir.ref<!b10i> {{.*}}
// CHECK:           %[[const_int3_b10i:.*]] = p4hir.const #int3_b10i
// CHECK:           %[[val_binop_mul:.*]] = p4hir.binop(mul, %[[arg_rhs]], %[[const_int3_b10i]]) : !b10i
// CHECK:           %[[val_binop_add_1:.*]] = p4hir.binop(add, %[[arg_lhs]], %[[val_binop_mul]]) : !b10i
// CHECK:           %[[const_int2_b10i:.*]] = p4hir.const #int2_b10i
// CHECK:           %[[val_binop_sub:.*]] = p4hir.binop(sub, %[[const_int2_b10i]], %[[arg_rhs]]) : !b10i
// CHECK:           %[[val_binop_add_2:.*]] = p4hir.binop(add, %[[val_binop_add_1]], %[[val_binop_sub]]) : !b10i
// CHECK:           p4hir.assign %[[val_binop_add_2]], %[[arg_res]] : <!b10i>
// CHECK:           p4hir.return

action complex_sequence(in bit<10> lhs, in bit<10> rhs, out bit<10> res) {
    res = lhs + rhs * 3 + (2 - rhs);
}
