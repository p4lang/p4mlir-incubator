// RUN: p4mlir-translate --typeinference-only %s | FileCheck %s
// RUN: p4mlir-translate --typeinference-only --no-dump --Wdisable --dump-exported-p4 %s | diff -u - %s.ref
// RUN: p4mlir-translate --typeinference-only --no-dump --Wdisable --dump-exported-p4 %s | p4test -

// NOTE: Assertions have been autogenerated by utils/generate-test-checks.py

// CHECK-LABEL:   p4hir.func action @bit_shl_bit
// CHECK-SAME:        %[[arg_lhs:.*]]: !b32i {{.*}}, %[[arg_rhs:.*]]: !b8i {{.*}}, %[[arg_res:.*]]: !p4hir.ref<!b32i> {{.*}}
// CHECK:           %[[val_shlop:.*]] = p4hir.shl(%[[arg_lhs]], %[[arg_rhs]] : !b8i) : !b32i
// CHECK:           p4hir.assign %[[val_shlop]], %[[arg_res]] : <!b32i>
// CHECK:           p4hir.return
// CHECK:         }

action bit_shl_bit(in bit<32> lhs, in bit<8> rhs, out bit<32> res) {
    res = lhs << rhs;
}

// CHECK-LABEL:   p4hir.func action @int_shl_bit
// CHECK-SAME:        %[[arg_lhs:.*]]: !i32i {{.*}}, %[[arg_rhs:.*]]: !b8i {{.*}}, %[[arg_res:.*]]: !p4hir.ref<!i32i> {{.*}}
// CHECK:           %[[val_shlop:.*]] = p4hir.shl(%[[arg_lhs]], %[[arg_rhs]] : !b8i) : !i32i
// CHECK:           p4hir.assign %[[val_shlop]], %[[arg_res]] : <!i32i>
// CHECK:           p4hir.return
// CHECK:         }

action int_shl_bit(in int<32> lhs, in bit<8> rhs, out int<32> res) {
    res = lhs << rhs;
}

// CHECK-LABEL:   p4hir.func action @bit_shl_const
// CHECK-SAME:        %[[arg_lhs:.*]]: !b32i {{.*}}, %[[arg_res:.*]]: !p4hir.ref<!b32i> {{.*}}
// CHECK:           %[[const_int1_infint:.*]] = p4hir.const #int1_infint
// CHECK:           %[[val_shlop:.*]] = p4hir.shl(%[[arg_lhs]], %[[const_int1_infint]] : !infint) : !b32i
// CHECK:           p4hir.assign %[[val_shlop]], %[[arg_res]] : <!b32i>
// CHECK:           p4hir.return
// CHECK:         }

action bit_shl_const(in bit<32> lhs, out bit<32> res) {
    res = lhs << 1;
}

// CHECK-LABEL:   p4hir.func action @int_shl_const
// CHECK-SAME:        %[[arg_lhs:.*]]: !i32i {{.*}}, %[[arg_res:.*]]: !p4hir.ref<!i32i> {{.*}}
// CHECK:           %[[const_int1_infint:.*]] = p4hir.const #int1_infint
// CHECK:           %[[val_shlop:.*]] = p4hir.shl(%[[arg_lhs]], %[[const_int1_infint]] : !infint) : !i32i
// CHECK:           p4hir.assign %[[val_shlop]], %[[arg_res]] : <!i32i>
// CHECK:           p4hir.return
// CHECK:         }

action int_shl_const(in int<32> lhs, out int<32> res) {
    res = lhs << 1;
}

// CHECK-LABEL:   p4hir.func action @const_shl_const
// CHECK:           p4hir.return

action const_shl_const() {
    const int res = 1 << 2;
}

// CHECK-LABEL:   p4hir.func action @bit_shr_bit
// CHECK-SAME:        %[[arg_lhs:.*]]: !b32i {{.*}}, %[[arg_rhs:.*]]: !b8i {{.*}}, %[[arg_res:.*]]: !p4hir.ref<!b32i> {{.*}}
// CHECK:           %[[val_shrop:.*]] = p4hir.shr(%[[arg_lhs]], %[[arg_rhs]] : !b8i) : !b32i
// CHECK:           p4hir.assign %[[val_shrop]], %[[arg_res]] : <!b32i>
// CHECK:           p4hir.return
// CHECK:         }

action bit_shr_bit(in bit<32> lhs, in bit<8> rhs, out bit<32> res) {
    res = lhs >> rhs;
}

// CHECK-LABEL:   p4hir.func action @int_shr_bit
// CHECK-SAME:        %[[arg_lhs:.*]]: !i32i {{.*}}, %[[arg_rhs:.*]]: !b8i {{.*}}, %[[arg_res:.*]]: !p4hir.ref<!i32i> {{.*}}
// CHECK:           %[[val_shrop:.*]] = p4hir.shr(%[[arg_lhs]], %[[arg_rhs]] : !b8i) : !i32i
// CHECK:           p4hir.assign %[[val_shrop]], %[[arg_res]] : <!i32i>
// CHECK:           p4hir.return
// CHECK:         }

action int_shr_bit(in int<32> lhs, in bit<8> rhs, out int<32> res) {
    res = lhs >> rhs;
}

// CHECK-LABEL:   p4hir.func action @bit_shr_const
// CHECK-SAME:        %[[arg_lhs:.*]]: !b32i {{.*}}, %[[arg_res:.*]]: !p4hir.ref<!b32i> {{.*}}
// CHECK:           %[[const_int1_infint:.*]] = p4hir.const #int1_infint
// CHECK:           %[[val_shrop:.*]] = p4hir.shr(%[[arg_lhs]], %[[const_int1_infint]] : !infint) : !b32i
// CHECK:           p4hir.assign %[[val_shrop]], %[[arg_res]] : <!b32i>
// CHECK:           p4hir.return
// CHECK:         }


action bit_shr_const(in bit<32> lhs, out bit<32> res) {
    res = lhs >> 1;
}

// CHECK-LABEL:   p4hir.func action @int_shr_const
// CHECK-SAME:        %[[arg_lhs:.*]]: !i32i {{.*}}, %[[arg_res:.*]]: !p4hir.ref<!i32i> {{.*}}
// CHECK:           %[[const_int1_infint:.*]] = p4hir.const #int1_infint
// CHECK:           %[[val_shrop:.*]] = p4hir.shr(%[[arg_lhs]], %[[const_int1_infint]] : !infint) : !i32i
// CHECK:           p4hir.assign %[[val_shrop]], %[[arg_res]] : <!i32i>
// CHECK:           p4hir.return
// CHECK:         }

action int_shr_const(in int<32> lhs, out int<32> res) {
    res = lhs >> 1;
}

// CHECK-LABEL:   p4hir.func action @const_shr_const
// CHECK:           p4hir.return

action const_shr_const() {
    const int res = 2 >> 1;
}
