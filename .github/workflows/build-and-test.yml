name: build-and-test

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:

# Cancel any preceding run on the pull request.
concurrency:
  group: p4mlir-${{ github.event.pull_request.number || github.ref }}
  cancel-in-progress: ${{ github.ref != 'refs/heads/main' }}

jobs:
  build-and-test:
    name: test-${{ matrix.os }}
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-22.04, ubuntu-24.04]

    steps:
    - name: Checkout repo
      uses: actions/checkout@v4
      with:
        submodules: recursive

    - name: Get LLVM hash
      id: get-llvm-hash
      run: echo "hash=$(git rev-parse @:./third_party/llvm-project)" >> $GITHUB_OUTPUT

    - name: Enable ccache
      uses: hendrikmuhs/ccache-action@v1.2
      with:
        key: ${{ runner.os }}-${{ matrix.os }}-llvm-commit-${{ steps.get-llvm-hash.outputs.hash }}-mlir-build-script-${{ hashFiles('${{ github.workspace }}/build_tools/build_mlir.sh') }}
        max-size: 2G

    - name: Cache LLVM
      id: cache-llvm
      uses: actions/cache@v3
      with:
        path: |
          third_party/llvm-project/build/bin/llvm-lit
          install
        key: ${{ runner.os }}-${{ matrix.os }}-llvm-commit-${{ steps.get-llvm-hash.outputs.hash }}-mlir-build-script-${{ hashFiles('${{ github.workspace }}/build_tools/build_mlir.sh') }}

    - name: Install requirements
      run: |
        build_tools/ubuntu_install_mlir_requirements.sh

    # --------
    # Build and test MLIR. Use cache when available.
    # --------

    - name: Build and test MLIR
      if: steps.cache-llvm.outputs.cache-hit != 'true'
      run: |
        build_tools/build_mlir.sh

    # --------
    # Build and test P4MLIR.
    # --------

    - name: Build and test P4MLIR
      run: |
        build_tools/build_p4c_with_p4mlir_ext.sh
